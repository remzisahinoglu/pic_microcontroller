CCS PCM C Compiler, Version 4.018, 12203               29-Mar-07 09:39

               Filename: D:\pic\pic16f628a\interrupt (kesmeler)\usart kesmesi\usart_kesme.lst

               ROM used: 138 words (7%)
                         Largest free fragment is 1910
               RAM used: 16 (7%) at main() level
                         18 (8%) worst case
               Stack:    2 worst case (1 in main + 1 for interrupts)

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   061
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   7F,W
0009:  MOVWF  20
000A:  MOVF   0A,W
000B:  MOVWF  28
000C:  CLRF   0A
000D:  SWAPF  20,F
000E:  MOVF   04,W
000F:  MOVWF  22
0010:  MOVF   77,W
0011:  MOVWF  23
0012:  MOVF   78,W
0013:  MOVWF  24
0014:  MOVF   79,W
0015:  MOVWF  25
0016:  MOVF   7A,W
0017:  MOVWF  26
0018:  MOVF   7B,W
0019:  MOVWF  27
001A:  BCF    03.7
001B:  BCF    03.5
001C:  MOVLW  8C
001D:  MOVWF  04
001E:  BTFSS  00.5
001F:  GOTO   022
0020:  BTFSC  0C.5
0021:  GOTO   035
0022:  MOVF   22,W
0023:  MOVWF  04
0024:  MOVF   23,W
0025:  MOVWF  77
0026:  MOVF   24,W
0027:  MOVWF  78
0028:  MOVF   25,W
0029:  MOVWF  79
002A:  MOVF   26,W
002B:  MOVWF  7A
002C:  MOVF   27,W
002D:  MOVWF  7B
002E:  MOVF   28,W
002F:  MOVWF  0A
0030:  SWAPF  21,W
0031:  MOVWF  03
0032:  SWAPF  7F,F
0033:  SWAPF  7F,W
0034:  RETFIE
.................... //rs232 alýcý kesme uygulamasý 
.................... //29.03.2007 
.................... //yazan = Remzi ÞAHÝNOÐLU 
.................... #if defined (__PCM__) 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
004C:  MOVLW  2A
004D:  MOVWF  04
004E:  BCF    03.7
004F:  MOVF   00,W
0050:  BTFSC  03.2
0051:  GOTO   060
0052:  MOVLW  01
0053:  MOVWF  78
0054:  CLRF   77
0055:  DECFSZ 77,F
0056:  GOTO   055
0057:  DECFSZ 78,F
0058:  GOTO   054
0059:  MOVLW  4A
005A:  MOVWF  77
005B:  DECFSZ 77,F
005C:  GOTO   05B
005D:  GOTO   05E
005E:  DECFSZ 00,F
005F:  GOTO   052
0060:  RETLW  00
.................... #fuses NOWDT,PUT,NOLVP,NOBROWNOUT,MCLR,INTRC_IO,NOPROTECT 
.................... #use RS232(BAUD=19200, xmit=PIN_B2, rcv=PIN_B1)   // saniyede 1200 bit max gönder 
.................... #endif 
....................  
.................... #byte PORTA = 0x05 
.................... #byte PORTB = 0x06 
.................... #byte STATUS = 0x03 
.................... #byte OPTION = 0x81 
.................... #byte INTCON = 0x0B 
....................  
.................... char veri=0; 
*
006F:  CLRF   29
....................  
.................... #int_RDA                        // usart kesmesi geldiðinde buradan basla 
.................... void RDA_isr() 
.................... { 
....................    if(kbhit()==1)             // usar alýcý tampon kesme bayraðý biti 
*
0035:  MOVLW  00
0036:  BTFSC  0C.5
0037:  MOVLW  01
0038:  SUBLW  01
0039:  BTFSS  03.2
003A:  GOTO   049
....................    {                       // bit 1 ise alýcý tampon dolu 
....................       veri=getc();         // RXREG saklayýcýsýný oku veriye yaz 
003B:  BTFSS  0C.5
003C:  GOTO   03B
003D:  MOVF   1A,W
003E:  MOVWF  29
....................       output_b(veri);      // veri deki bilgiyi portb ye çak 
003F:  BSF    03.5
0040:  CLRF   06
0041:  BCF    03.5
0042:  MOVF   29,W
0043:  MOVWF  06
....................       output_a(veri);      // veri deki bilgiyi portb ye çak 
0044:  BSF    03.5
0045:  CLRF   05
0046:  BCF    03.5
0047:  MOVF   29,W
0048:  MOVWF  05
....................       //delay_ms(1000); 
....................    }   
.................... } 
....................  
0049:  BCF    0C.5
004A:  BCF    0A.3
004B:  GOTO   022
.................... void main() 
.................... { 
*
0061:  CLRF   04
0062:  BCF    03.7
0063:  MOVLW  1F
0064:  ANDWF  03,F
0065:  MOVLW  0C
0066:  BSF    03.5
0067:  MOVWF  19
0068:  MOVLW  A6
0069:  MOVWF  18
006A:  MOVLW  90
006B:  BCF    03.5
006C:  MOVWF  18
006D:  MOVLW  07
006E:  MOVWF  1F
....................    set_tris_b(0b00000100); 
*
0070:  MOVLW  04
0071:  TRIS   6
....................    set_tris_a(0b00010000);      // mclr ve RA0-1 giriþ 
0072:  MOVLW  10
0073:  TRIS   5
....................    enable_interrupts(int_RDA);  // usart kesmesi aktif yapýlýr 
0074:  BSF    03.5
0075:  BSF    0C.5
....................    enable_interrupts(GLOBAL);   // kesmelere izin verilir 
0076:  MOVLW  C0
0077:  BCF    03.5
0078:  IORWF  0B,F
....................     
....................    while(TRUE)                  // normal program akýsý buradan olur 
....................    { 
....................       output_b(255); 
0079:  BSF    03.5
007A:  CLRF   06
007B:  MOVLW  FF
007C:  BCF    03.5
007D:  MOVWF  06
....................       delay_ms(250); 
007E:  MOVLW  FA
007F:  MOVWF  2A
0080:  CALL   04C
....................       output_b(0); 
0081:  BSF    03.5
0082:  CLRF   06
0083:  BCF    03.5
0084:  CLRF   06
....................       delay_ms(250); 
0085:  MOVLW  FA
0086:  MOVWF  2A
0087:  CALL   04C
....................    }    
0088:  GOTO   079
.................... } 
0089:  SLEEP

Configuration Fuses:
   Word  1: 3F30   NOWDT PUT NOPROTECT NOBROWNOUT MCLR NOLVP INTRC_IO NOCPD
