CCS PCM C Compiler, Version 4.106, 14749               22-Nis-11 00:27

               Filename: D:\ram\parellel robot\elektronik\pc pic seri iletiþim\matlab_rs232.lst

               ROM used: 614 words (7%)
                         Largest free fragment is 2048
               RAM used: 94 (26%) at main() level
                         119 (32%) worst case
               Stack:    8 worst case (4 in main + 4 for interrupts)

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   20D
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  MOVLW  8C
0018:  MOVWF  04
0019:  BTFSS  00.5
001A:  GOTO   01D
001B:  BTFSC  0C.5
001C:  GOTO   02E
001D:  MOVF   22,W
001E:  MOVWF  04
001F:  MOVF   23,W
0020:  MOVWF  77
0021:  MOVF   24,W
0022:  MOVWF  78
0023:  MOVF   25,W
0024:  MOVWF  79
0025:  MOVF   26,W
0026:  MOVWF  7A
0027:  MOVF   20,W
0028:  MOVWF  0A
0029:  SWAPF  21,W
002A:  MOVWF  03
002B:  SWAPF  7F,F
002C:  SWAPF  7F,W
002D:  RETFIE
002E:  BCF    0A.3
002F:  BCF    0A.4
0030:  GOTO   111
.................... //matlabdan alýnan veriyi 877 kullanarak lcd ekrana yaz 
.................... //20.04.2011 
.................... //yazan = Remzi ÞAHÝNOÐLU 
....................  
.................... #if defined(__PCM__) 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
00A1:  MOVLW  20
00A2:  MOVWF  04
00A3:  BSF    03.7
00A4:  MOVF   00,W
00A5:  BTFSC  03.2
00A6:  GOTO   0B5
00A7:  MOVLW  01
00A8:  MOVWF  78
00A9:  CLRF   77
00AA:  DECFSZ 77,F
00AB:  GOTO   0AA
00AC:  DECFSZ 78,F
00AD:  GOTO   0A9
00AE:  MOVLW  4A
00AF:  MOVWF  77
00B0:  DECFSZ 77,F
00B1:  GOTO   0B0
00B2:  GOTO   0B3
00B3:  DECFSZ 00,F
00B4:  GOTO   0A7
00B5:  RETURN
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP, NOBROWNOUT, NOPUT, NOWRT, NODEBUG, NOCPD 
.................... #define use_portb_lcd TRUE             // lcd bilgisi için port b’yi kullanýyoruz 
.................... #include <lcd.c>                       // lcd için gerekecek fonksiyonlarýn bulunduðu dosya lcd.c 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  IORLW  F0
0051:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0052:  BCF    03.5
0053:  BSF    06.2
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BSF    06.0
....................    delay_cycles(1); 
0056:  NOP
....................    high = lcd_read_nibble(); 
*
005C:  MOVF   78,W
005D:  BSF    03.6
005E:  MOVWF  27
....................        
....................    lcd_output_enable(0); 
005F:  BCF    03.6
0060:  BCF    06.0
....................    delay_cycles(1); 
0061:  NOP
....................    lcd_output_enable(1); 
0062:  BSF    06.0
....................    delay_us(1); 
0063:  NOP
....................    low = lcd_read_nibble(); 
*
0069:  MOVF   78,W
006A:  BSF    03.6
006B:  MOVWF  26
....................        
....................    lcd_output_enable(0); 
006C:  BCF    03.6
006D:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
006E:  MOVLW  0F
006F:  BSF    03.5
0070:  ANDWF  06,W
0071:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0072:  BCF    03.5
0073:  BSF    03.6
0074:  SWAPF  27,W
0075:  MOVWF  77
0076:  MOVLW  F0
0077:  ANDWF  77,F
0078:  MOVF   77,W
0079:  IORWF  26,W
007A:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0057:  MOVF   06,W
0058:  MOVWF  77
0059:  SWAPF  06,W
005A:  ANDLW  0F
005B:  MOVWF  78
*
0064:  MOVF   06,W
0065:  MOVWF  77
0066:  SWAPF  06,W
0067:  ANDLW  0F
0068:  MOVWF  78
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0039:  BSF    03.6
003A:  SWAPF  27,W
003B:  ANDLW  F0
003C:  MOVWF  77
003D:  MOVLW  0F
003E:  BCF    03.6
003F:  ANDWF  06,W
0040:  IORWF  77,W
0041:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    06.0
....................    delay_us(2); 
0044:  GOTO   045
....................    lcd_output_enable(0); 
0045:  BCF    06.0
.................... } 
0046:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
0047:  BSF    03.5
0048:  BCF    06.0
....................    lcd_rs_tris(); 
0049:  BCF    06.1
....................    lcd_rw_tris(); 
004A:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
004B:  BCF    03.5
004C:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
007B:  MOVF   78,W
007C:  MOVWF  26
007D:  BTFSS  26.7
007E:  GOTO   081
007F:  BCF    03.6
0080:  GOTO   04D
....................    lcd_output_rs(address); 
0081:  BTFSC  24.0
0082:  GOTO   086
0083:  BCF    03.6
0084:  BCF    06.1
0085:  BSF    03.6
0086:  BTFSS  24.0
0087:  GOTO   08B
0088:  BCF    03.6
0089:  BSF    06.1
008A:  BSF    03.6
....................    delay_cycles(1); 
008B:  NOP
....................    lcd_output_rw(0); 
008C:  BCF    03.6
008D:  BCF    06.2
....................    delay_cycles(1); 
008E:  NOP
....................    lcd_output_enable(0); 
008F:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
0090:  BSF    03.6
0091:  SWAPF  25,W
0092:  MOVWF  26
0093:  MOVLW  0F
0094:  ANDWF  26,F
0095:  MOVF   26,W
0096:  MOVWF  27
0097:  BCF    03.6
0098:  CALL   039
....................    lcd_send_nibble(n & 0xf); 
0099:  BSF    03.6
009A:  MOVF   25,W
009B:  ANDLW  0F
009C:  MOVWF  26
009D:  MOVWF  27
009E:  BCF    03.6
009F:  CALL   039
.................... } 
00A0:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
015F:  MOVLW  0F
0160:  BSF    03.5
0161:  ANDWF  06,W
0162:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0163:  BCF    06.0
....................    lcd_rs_tris(); 
0164:  BCF    06.1
....................    lcd_rw_tris(); 
0165:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0166:  BCF    03.5
0167:  BCF    06.1
....................    lcd_output_rw(0); 
0168:  BCF    06.2
....................    lcd_output_enable(0); 
0169:  BCF    06.0
016A:  CLRF   27
016B:  BTFSC  0B.7
016C:  BSF    27.7
016D:  BCF    0B.7
....................      
....................    delay_ms(15); 
016E:  MOVLW  0F
016F:  BSF    03.6
0170:  MOVWF  20
0171:  BCF    03.6
0172:  CALL   0A1
0173:  BTFSC  27.7
0174:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
0175:  MOVLW  01
0176:  BSF    03.6
0177:  MOVWF  10
0178:  MOVF   10,W
0179:  SUBLW  03
017A:  BTFSS  03.0
017B:  GOTO   196
017C:  BCF    03.6
017D:  CLRF   27
017E:  BTFSC  0B.7
017F:  BSF    27.7
0180:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
0181:  MOVLW  03
0182:  BSF    03.6
0183:  MOVWF  27
0184:  BCF    03.6
0185:  CALL   039
0186:  BTFSC  27.7
0187:  BSF    0B.7
0188:  CLRF   27
0189:  BTFSC  0B.7
018A:  BSF    27.7
018B:  BCF    0B.7
....................        delay_ms(5); 
018C:  MOVLW  05
018D:  BSF    03.6
018E:  MOVWF  20
018F:  BCF    03.6
0190:  CALL   0A1
0191:  BTFSC  27.7
0192:  BSF    0B.7
....................    } 
0193:  BSF    03.6
0194:  INCF   10,F
0195:  GOTO   178
0196:  BCF    03.6
0197:  CLRF   27
0198:  BTFSC  0B.7
0199:  BSF    27.7
019A:  BCF    0B.7
....................     
....................    lcd_send_nibble(2); 
019B:  MOVLW  02
019C:  BSF    03.6
019D:  MOVWF  27
019E:  BCF    03.6
019F:  CALL   039
01A0:  BTFSC  27.7
01A1:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
01A2:  BSF    03.6
01A3:  CLRF   10
01A4:  MOVF   10,W
01A5:  SUBLW  03
01A6:  BTFSS  03.0
01A7:  GOTO   1BD
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
01A8:  MOVF   10,W
01A9:  BCF    03.6
01AA:  CALL   031
01AB:  BSF    03.6
01AC:  MOVWF  11
01AD:  BCF    03.6
01AE:  CLRF   27
01AF:  BTFSC  0B.7
01B0:  BSF    27.7
01B1:  BCF    0B.7
01B2:  BSF    03.6
01B3:  CLRF   24
01B4:  MOVF   11,W
01B5:  MOVWF  25
01B6:  BCF    03.6
01B7:  CALL   047
01B8:  BTFSC  27.7
01B9:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
01BA:  BSF    03.6
01BB:  INCF   10,F
01BC:  GOTO   1A4
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
01BD:  BCF    03.6
01BE:  BCF    0A.3
01BF:  BCF    0A.4
01C0:  GOTO   259 (RETURN)
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
*
00CA:  DECFSZ 21,W
00CB:  GOTO   0CD
00CC:  GOTO   0D0
*
00EE:  DECFSZ 21,W
00EF:  GOTO   0F1
00F0:  GOTO   0F4
....................       address=LCD_LINE_TWO; 
*
00CD:  MOVLW  40
00CE:  MOVWF  22
*
00F1:  MOVLW  40
00F2:  MOVWF  22
....................    else 
*
00CF:  GOTO   0D1
*
00F3:  GOTO   0F5
....................       address=0; 
*
00D0:  CLRF   22
*
00F4:  CLRF   22
....................       
....................    address+=x-1; 
*
00D1:  MOVLW  01
00D2:  SUBWF  20,W
00D3:  ADDWF  22,F
*
00F5:  MOVLW  01
00F6:  SUBWF  20,W
00F7:  ADDWF  22,F
....................    lcd_send_byte(0,0x80|address); 
*
00D4:  MOVF   22,W
00D5:  IORLW  80
00D6:  MOVWF  23
00D7:  CLRF   24
00D8:  MOVF   23,W
00D9:  MOVWF  25
00DA:  BCF    03.6
00DB:  CALL   047
*
00F8:  MOVF   22,W
00F9:  IORLW  80
00FA:  MOVWF  23
00FB:  CLRF   24
00FC:  MOVF   23,W
00FD:  MOVWF  25
00FE:  BCF    03.6
00FF:  CALL   047
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
*
00B6:  BSF    03.6
00B7:  MOVF   1F,W
00B8:  XORLW  07
00B9:  BCF    03.6
00BA:  BTFSC  03.2
00BB:  GOTO   0C6
00BC:  XORLW  0B
00BD:  BTFSC  03.2
00BE:  GOTO   0DD
00BF:  XORLW  06
00C0:  BTFSC  03.2
00C1:  GOTO   0E9
00C2:  XORLW  02
00C3:  BTFSC  03.2
00C4:  GOTO   101
00C5:  GOTO   108
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00C6:  MOVLW  01
00C7:  BSF    03.6
00C8:  MOVWF  20
00C9:  MOVWF  21
*
00DC:  GOTO   110
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00DD:  BSF    03.6
00DE:  CLRF   24
00DF:  MOVLW  01
00E0:  MOVWF  25
00E1:  BCF    03.6
00E2:  CALL   047
....................                      delay_ms(2); 
00E3:  MOVLW  02
00E4:  BSF    03.6
00E5:  MOVWF  20
00E6:  BCF    03.6
00E7:  CALL   0A1
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00E8:  GOTO   110
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E9:  MOVLW  01
00EA:  BSF    03.6
00EB:  MOVWF  20
00EC:  MOVLW  02
00ED:  MOVWF  21
*
0100:  GOTO   110
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
0101:  BSF    03.6
0102:  CLRF   24
0103:  MOVLW  10
0104:  MOVWF  25
0105:  BCF    03.6
0106:  CALL   047
0107:  GOTO   110
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0108:  MOVLW  01
0109:  BSF    03.6
010A:  MOVWF  24
010B:  MOVF   1F,W
010C:  MOVWF  25
010D:  BCF    03.6
010E:  CALL   047
010F:  GOTO   110
....................      #endif 
....................    } 
.................... } 
0110:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #use rs232 (baud=9600, xmit=PIN_C6, rcv=PIN_c7, parity=N, stop=1) 
.................... #endif 
....................  
.................... char veri[80]; 
....................  
.................... #int_rda 
.................... void serihaberlesme_kesmesi() 
.................... { 
....................    disable_interrupts(int_rda); 
0111:  BSF    03.5
0112:  BCF    0C.5
....................    output_high(pin_c5); 
0113:  BCF    03.5
0114:  BCF    28.5
0115:  MOVF   28,W
0116:  BSF    03.5
0117:  MOVWF  07
0118:  BCF    03.5
0119:  BSF    07.5
....................    //veri=getc(); 
....................    gets(veri); 
011A:  MOVLW  A0
011B:  MOVWF  04
011C:  BCF    03.7
011D:  DECF   04,F
011E:  INCF   04,F
011F:  BTFSS  0C.5
0120:  GOTO   11F
0121:  MOVF   1A,W
0122:  MOVWF  00
0123:  MOVLW  0D
0124:  SUBWF  00,W
0125:  BTFSS  03.2
0126:  GOTO   11E
0127:  CLRF   00
....................    //lcd_putc(veri); 
....................    printf(lcd_putc,"\f%s", veri); 
0128:  MOVLW  0C
0129:  BSF    03.6
012A:  MOVWF  1F
012B:  BCF    03.6
012C:  CALL   0B6
012D:  MOVLW  A0
012E:  MOVWF  04
012F:  BCF    03.7
....................    output_low(pin_c5); 
*
014C:  BCF    28.5
014D:  MOVF   28,W
014E:  BSF    03.5
014F:  MOVWF  07
0150:  BCF    03.5
0151:  BCF    07.5
....................     
.................... } 
....................  
0152:  BCF    0C.5
0153:  BCF    0A.3
0154:  BCF    0A.4
0155:  GOTO   01D
.................... void main() 
.................... { 
*
020D:  CLRF   04
020E:  BCF    03.7
020F:  MOVLW  1F
0210:  ANDWF  03,F
0211:  MOVLW  19
0212:  BSF    03.5
0213:  MOVWF  19
0214:  MOVLW  A6
0215:  MOVWF  18
0216:  MOVLW  90
0217:  BCF    03.5
0218:  MOVWF  18
0219:  BSF    03.5
021A:  BSF    1F.0
021B:  BSF    1F.1
021C:  BSF    1F.2
021D:  BCF    1F.3
....................    setup_PSP(PSP_DISABLED); 
*
0221:  BSF    03.5
0222:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
0223:  BCF    03.5
0224:  BCF    14.5
0225:  BCF    28.5
0226:  MOVF   28,W
0227:  BSF    03.5
0228:  MOVWF  07
0229:  BCF    03.5
022A:  BSF    28.4
022B:  MOVF   28,W
022C:  BSF    03.5
022D:  MOVWF  07
022E:  BCF    03.5
022F:  BCF    28.3
0230:  MOVF   28,W
0231:  BSF    03.5
0232:  MOVWF  07
0233:  MOVLW  01
0234:  BCF    03.5
0235:  MOVWF  14
0236:  MOVLW  00
0237:  BSF    03.5
0238:  MOVWF  14
....................    setup_timer_1(T1_DISABLED); 
0239:  BCF    03.5
023A:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
023B:  MOVWF  78
023C:  MOVWF  12
023D:  MOVLW  00
023E:  BSF    03.5
023F:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS); 
0240:  BSF    1F.0
0241:  BSF    1F.1
0242:  BSF    1F.2
0243:  BCF    1F.3
....................    setup_adc(ADC_OFF); 
0244:  BCF    03.5
0245:  BCF    1F.0
....................    setup_CCP1(CCP_OFF); 
0246:  BSF    28.2
0247:  MOVF   28,W
0248:  BSF    03.5
0249:  MOVWF  07
024A:  BCF    03.5
024B:  CLRF   17
....................    setup_CCP2(CCP_OFF); 
024C:  BSF    28.1
024D:  MOVF   28,W
024E:  BSF    03.5
024F:  MOVWF  07
0250:  BCF    03.5
0251:  CLRF   1D
....................     
....................    output_low(pin_c5); 
0252:  BCF    28.5
0253:  MOVF   28,W
0254:  BSF    03.5
0255:  MOVWF  07
0256:  BCF    03.5
0257:  BCF    07.5
....................    lcd_init(); 
0258:  GOTO   15F
....................     
....................    lcd_putc("\rport dinleniyor"); 
0259:  MOVLW  56
025A:  BSF    03.6
025B:  MOVWF  0D
025C:  MOVLW  01
025D:  MOVWF  0F
025E:  BCF    03.6
025F:  GOTO   1C1
....................     
....................    //printf("\n\rKlavyeden bir metin giriniz ve enter tusuna basiniz>"); 
....................     
....................    enable_interrupts(GLOBAL); 
0260:  MOVLW  C0
0261:  IORWF  0B,F
....................     
....................    while(TRUE) 
....................    { 
....................       enable_interrupts(int_rda); 
0262:  BSF    03.5
0263:  BSF    0C.5
....................     
....................    } 
0264:  GOTO   263
.................... } 
....................  
0265:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG
