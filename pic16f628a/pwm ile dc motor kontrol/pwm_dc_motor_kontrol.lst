CCS PCM C Compiler, Version 4.106, 14749               11-Haz-11 10:43

               Filename: D:\ram\projeler\parellel robot - lisans bitirme tezi\elektronik\test\pwm ile dc motor kontrol\pwm_dc_motor_kontrol.lst

               ROM used: 553 words (7%)
                         Largest free fragment is 2048
               RAM used: 11 (3%) at main() level
                         28 (8%) worst case
               Stack:    5 locations

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   18F
0003:  NOP
.................... // pwm ile dc motor ileri geri hýz kontrol devresi 
.................... // 03.06.2011 
.................... // yazan = Remzi ÞAHÝNOÐLU 
....................  
.................... // duyty cycle süresi belli deðerler içinde olmalý 
....................  
.................... #if defined(__PCM__) 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=10    // dahili adc 10 bit olarak ayarlanmýstýr 
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP, NOBROWNOUT, NOPUT, NOWRT, NODEBUG, NOCPD 
.................... #use delay(clock=4000000) 
*
0010:  MOVLW  2F
0011:  MOVWF  04
0012:  BCF    03.7
0013:  MOVF   00,W
0014:  BTFSC  03.2
0015:  GOTO   024
0016:  MOVLW  01
0017:  MOVWF  78
0018:  CLRF   77
0019:  DECFSZ 77,F
001A:  GOTO   019
001B:  DECFSZ 78,F
001C:  GOTO   018
001D:  MOVLW  4A
001E:  MOVWF  77
001F:  DECFSZ 77,F
0020:  GOTO   01F
0021:  GOTO   022
0022:  DECFSZ 00,F
0023:  GOTO   016
0024:  RETURN
.................... #use fast_io(a) 
.................... #use fast_io(c) 
.................... #use fast_io(e) 
.................... #define use_portb_lcd TRUE             // lcd bilgisi için port b’yi kullanýyoruz 
.................... #include <lcd416.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                        free licence                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x28 | (lcd_type << 2), 0x0C, 1, 6}; 
....................                              // 0x28 = 5x8 dot matrix 
....................                              // 0x0C = display kapalý ve imlec alt çizgi gözükmez ve yanýp sönmez 
....................                              // 1 lcd yi temizle 
....................                              // 6 imleci saða kaydýr 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0032:  MOVLW  F0
0033:  BSF    03.5
0034:  MOVWF  06
....................       lcd.rw = 1; 
0035:  BCF    03.5
0036:  BSF    06.2
....................       delay_cycles(1); 
0037:  NOP
....................       lcd.enable = 1; 
0038:  BSF    06.0
....................       delay_cycles(1); 
0039:  NOP
....................       high = lcd.data; 
003A:  MOVF   06,W
003B:  SWAPF  06,W
003C:  ANDLW  0F
003D:  MOVWF  35
....................       lcd.enable = 0; 
003E:  BCF    06.0
....................       delay_cycles(1); 
003F:  NOP
....................       lcd.enable = 1; 
0040:  BSF    06.0
....................       delay_us(1); 
0041:  NOP
....................       low = lcd.data; 
0042:  MOVF   06,W
0043:  SWAPF  06,W
0044:  ANDLW  0F
0045:  MOVWF  34
....................       lcd.enable = 0; 
0046:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0047:  MOVLW  00
0048:  BSF    03.5
0049:  MOVWF  06
....................       return( (high<<4) | low); 
004A:  BCF    03.5
004B:  SWAPF  35,W
004C:  MOVWF  77
004D:  MOVLW  F0
004E:  ANDWF  77,F
004F:  MOVF   77,W
0050:  IORWF  34,W
0051:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0025:  SWAPF  35,W
0026:  ANDLW  F0
0027:  MOVWF  77
0028:  MOVLW  0F
0029:  ANDWF  06,W
002A:  IORWF  77,W
002B:  MOVWF  06
....................       delay_cycles(1); 
002C:  NOP
....................       lcd.enable = 1; 
002D:  BSF    06.0
....................       delay_us(2); 
002E:  GOTO   02F
....................       lcd.enable = 0; 
002F:  BCF    06.0
.................... } 
0030:  RETURN
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0031:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0052:  MOVF   78,W
0053:  MOVWF  34
0054:  BTFSC  34.7
0055:  GOTO   032
....................       lcd.rs = address; 
0056:  BTFSS  32.0
0057:  BCF    06.1
0058:  BTFSC  32.0
0059:  BSF    06.1
....................       delay_cycles(1); 
005A:  NOP
....................       lcd.rw = 0; 
005B:  BCF    06.2
....................       delay_cycles(1); 
005C:  NOP
....................       lcd.enable = 0; 
005D:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
005E:  SWAPF  33,W
005F:  MOVWF  34
0060:  MOVLW  0F
0061:  ANDWF  34,F
0062:  MOVF   34,W
0063:  MOVWF  35
0064:  CALL   025
....................       lcd_send_nibble(n & 0xf); 
0065:  MOVF   33,W
0066:  ANDLW  0F
0067:  MOVWF  34
0068:  MOVWF  35
0069:  CALL   025
.................... } 
006A:  RETURN
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
006B:  MOVLW  00
006C:  BSF    03.5
006D:  MOVWF  06
....................     lcd.rs = 0; 
006E:  BCF    03.5
006F:  BCF    06.1
....................     lcd.rw = 0; 
0070:  BCF    06.2
....................     lcd.enable = 0; 
0071:  BCF    06.0
....................     delay_ms(15); 
0072:  MOVLW  0F
0073:  MOVWF  2F
0074:  CALL   010
....................     for(i=1;i<=3;++i) { 
0075:  MOVLW  01
0076:  MOVWF  25
0077:  MOVF   25,W
0078:  SUBLW  03
0079:  BTFSS  03.0
007A:  GOTO   083
....................        lcd_send_nibble(3); 
007B:  MOVLW  03
007C:  MOVWF  35
007D:  CALL   025
....................        delay_ms(5); 
007E:  MOVLW  05
007F:  MOVWF  2F
0080:  CALL   010
....................     } 
0081:  INCF   25,F
0082:  GOTO   077
....................     lcd_send_nibble(2); 
0083:  MOVLW  02
0084:  MOVWF  35
0085:  CALL   025
....................     for(i=0;i<=3;++i) 
0086:  CLRF   25
0087:  MOVF   25,W
0088:  SUBLW  03
0089:  BTFSS  03.0
008A:  GOTO   094
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
008B:  MOVF   25,W
008C:  CALL   004
008D:  MOVWF  26
008E:  CLRF   32
008F:  MOVF   26,W
0090:  MOVWF  33
0091:  CALL   031
0092:  INCF   25,F
0093:  GOTO   087
.................... } 
0094:  BCF    0A.3
0095:  BCF    0A.4
0096:  GOTO   1D1 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
0097:  MOVLW  01
0098:  SUBWF  30,W
0099:  ADDLW  FC
009A:  BTFSC  03.0
009B:  GOTO   0AA
009C:  ADDLW  04
009D:  GOTO   0B2
....................      case 1 : address=0x80;break;   // 1. satýr ilk adresi 
009E:  MOVLW  80
009F:  MOVWF  31
00A0:  GOTO   0AA
....................      case 2 : address=0xc0;break;   // 2. satýr ilk adresi 
00A1:  MOVLW  C0
00A2:  MOVWF  31
00A3:  GOTO   0AA
....................      case 3 : address=0x90;break;   // 3. satýr ilk adresi 0x94 yerine 0x90 olmalý 
00A4:  MOVLW  90
00A5:  MOVWF  31
00A6:  GOTO   0AA
....................      case 4 : address=0xd0;break;   // 4. satýr ilk adresi 0xd4 yerine 0xd0 olmalý 
00A7:  MOVLW  D0
00A8:  MOVWF  31
00A9:  GOTO   0AA
....................    } 
....................    address+=x-1; 
00AA:  MOVLW  01
00AB:  SUBWF  2F,W
00AC:  ADDWF  31,F
....................    lcd_send_byte(0,address); 
00AD:  CLRF   32
00AE:  MOVF   31,W
00AF:  MOVWF  33
00B0:  CALL   031
.................... } 
00B1:  RETURN
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00BA:  MOVF   2E,W
00BB:  XORLW  0C
00BC:  BTFSC  03.2
00BD:  GOTO   0C5
00BE:  XORLW  06
00BF:  BTFSC  03.2
00C0:  GOTO   0CF
00C1:  XORLW  02
00C2:  BTFSC  03.2
00C3:  GOTO   0D6
00C4:  GOTO   0DB
....................      case '\f'   : lcd_send_byte(0,1); 
00C5:  CLRF   32
00C6:  MOVLW  01
00C7:  MOVWF  33
00C8:  CALL   031
....................                    lcdline=1; 
00C9:  MOVLW  01
00CA:  MOVWF  20
....................                    delay_ms(2); 
00CB:  MOVLW  02
00CC:  MOVWF  2F
00CD:  CALL   010
....................                                            break; 
00CE:  GOTO   0E1
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00CF:  INCF   20,F
00D0:  MOVLW  01
00D1:  MOVWF  2F
00D2:  MOVF   20,W
00D3:  MOVWF  30
00D4:  CALL   097
00D5:  GOTO   0E1
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00D6:  CLRF   32
00D7:  MOVLW  10
00D8:  MOVWF  33
00D9:  CALL   031
00DA:  GOTO   0E1
....................      default     : lcd_send_byte(1,c);     break; 
00DB:  MOVLW  01
00DC:  MOVWF  32
00DD:  MOVF   2E,W
00DE:  MOVWF  33
00DF:  CALL   031
00E0:  GOTO   0E1
....................    } 
.................... } 
00E1:  RETURN
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int bilgi=0, eski_bilgi=0; 
.................... //float voltaj; 
....................                                                   
.................... void main()               
.................... { 
*
018F:  CLRF   04
0190:  BCF    03.7
0191:  MOVLW  1F
0192:  ANDWF  03,F
0193:  CLRF   22
0194:  CLRF   21
0195:  CLRF   24
0196:  CLRF   23
0197:  BSF    03.5
0198:  BSF    1F.0
0199:  BSF    1F.1
019A:  BSF    1F.2
019B:  BCF    1F.3
019C:  MOVLW  07
019D:  MOVWF  1C
....................    setup_psp(PSP_DISABLED); 
019E:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
019F:  BCF    03.5
01A0:  BCF    14.5
01A1:  MOVLW  01
01A2:  MOVWF  14
01A3:  MOVLW  00
01A4:  BSF    03.5
01A5:  MOVWF  14
....................    setup_timer_1(T1_DISABLED); 
01A6:  BCF    03.5
01A7:  CLRF   10
....................              
....................    set_tris_a(0x01); 
01A8:  MOVLW  01
01A9:  BSF    03.5
01AA:  MOVWF  05
....................    set_tris_c(0x00); 
01AB:  MOVLW  00
01AC:  MOVWF  07
....................    set_tris_e(0x03); 
01AD:  BSF    09.0
01AE:  BSF    09.1
01AF:  BCF    09.2
....................     
....................    setup_CCP1(CCP_PWM); 
01B0:  BCF    03.5
01B1:  BCF    07.2
01B2:  MOVLW  0C
01B3:  MOVWF  17
....................    setup_CCP2(CCP_OFF); 
01B4:  CLRF   1D
....................     
....................    setup_timer_2(T2_DIV_BY_1,99,1); 
01B5:  MOVLW  00
01B6:  MOVWF  78
01B7:  IORLW  04
01B8:  MOVWF  12
01B9:  MOVLW  63
01BA:  BSF    03.5
01BB:  MOVWF  12
....................     
....................    output_c(0x00); 
01BC:  BCF    03.5
01BD:  CLRF   07
....................     
....................    setup_adc(adc_clock_div_32);     // adc clock frenkansý fosc/32 
01BE:  BSF    03.5
01BF:  BCF    1F.6
01C0:  BCF    03.5
01C1:  BCF    1F.6
01C2:  BSF    1F.7
01C3:  BSF    03.5
01C4:  BSF    1F.7
01C5:  BCF    03.5
01C6:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
01C7:  BSF    03.5
01C8:  BCF    1F.0
01C9:  BCF    1F.1
01CA:  BCF    1F.2
01CB:  BCF    1F.3
....................     
....................    enable_interrupts(INT_AD); 
01CC:  BSF    0C.6
....................    enable_interrupts(GLOBAL); 
01CD:  MOVLW  C0
01CE:  BCF    03.5
01CF:  IORWF  0B,F
....................     
....................    
....................    lcd_init(); 
01D0:  GOTO   06B
....................    printf(lcd_putc,"dadsad"); 
01D1:  MOVLW  0C
01D2:  BSF    03.6
01D3:  MOVWF  0D
01D4:  MOVLW  00
01D5:  MOVWF  0F
01D6:  BCF    03.6
01D7:  GOTO   0E2
....................    delay_ms(500); 
01D8:  MOVLW  02
01D9:  MOVWF  25
01DA:  MOVLW  FA
01DB:  MOVWF  2F
01DC:  CALL   010
01DD:  DECFSZ 25,F
01DE:  GOTO   1DA
....................        
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(5); 
01DF:  MOVLW  28
01E0:  MOVWF  78
01E1:  MOVF   1F,W
01E2:  ANDLW  C7
01E3:  IORWF  78,W
01E4:  MOVWF  1F
....................       delay_us(20); 
01E5:  MOVLW  06
01E6:  MOVWF  77
01E7:  DECFSZ 77,F
01E8:  GOTO   1E7
01E9:  NOP
....................       bilgi = read_adc(); 
01EA:  BSF    1F.2
01EB:  BTFSC  1F.2
01EC:  GOTO   1EB
01ED:  BSF    03.5
01EE:  MOVF   1E,W
01EF:  BCF    03.5
01F0:  MOVWF  21
01F1:  MOVF   1E,W
01F2:  MOVWF  22
....................       //delay_ms(10); 
....................       //voltaj = 0.0048828125*bilgi;  // digitale cevirme iþlemi uygulanan sinyalin  
....................       // adc için hesaplana adým büyüklüðü: Vref / 2^10 = 5V/1024=0.0048828125 
....................        
....................       if(bilgi != eski_bilgi) 
01F3:  MOVF   23,W
01F4:  SUBWF  21,W
01F5:  BTFSS  03.2
01F6:  GOTO   1FB
01F7:  MOVF   24,W
01F8:  SUBWF  22,W
01F9:  BTFSC  03.2
01FA:  GOTO   224
....................       { 
....................          eski_bilgi=bilgi; 
01FB:  MOVF   22,W
01FC:  MOVWF  24
01FD:  MOVF   21,W
01FE:  MOVWF  23
....................          set_pwm1_duty(bilgi); 
01FF:  MOVF   22,W
0200:  MOVWF  79
0201:  MOVF   21,W
0202:  MOVWF  78
0203:  RRF    79,F
0204:  RRF    78,F
0205:  RRF    79,F
0206:  RRF    78,F
0207:  RRF    79,F
0208:  MOVF   78,W
0209:  MOVWF  15
020A:  RRF    79,F
020B:  RRF    79,W
020C:  ANDLW  30
020D:  MOVWF  77
020E:  MOVF   17,W
020F:  ANDLW  CF
0210:  IORWF  77,W
0211:  MOVWF  17
....................          lcd_send_byte(0,0x01); 
0212:  CLRF   32
0213:  MOVLW  01
0214:  MOVWF  33
0215:  CALL   031
....................          lcd_gotoxy(1,1); 
0216:  MOVLW  01
0217:  MOVWF  2F
0218:  MOVWF  30
0219:  CALL   097
....................          printf(lcd_putc,"\f%lu",bilgi); 
021A:  MOVLW  0C
021B:  MOVWF  2E
021C:  CALL   0BA
021D:  MOVLW  10
021E:  MOVWF  04
021F:  MOVF   22,W
0220:  MOVWF  26
0221:  MOVF   21,W
0222:  MOVWF  25
0223:  GOTO   12A
....................       } 
....................       delay_ms(5); 
0224:  MOVLW  05
0225:  MOVWF  2F
0226:  CALL   010
....................    } 
0227:  GOTO   1DF
.................... } 
0228:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
