CCS PCM C Compiler, Version 4.106, 14749               11-Haz-11 10:35

               Filename: D:\ram\projeler\parellel robot - lisans bitirme tezi\elektronik\test\analog digital çevirici\adc_modulu.lst

               ROM used: 1136 words (14%)
                         Largest free fragment is 2048
               RAM used: 15 (4%) at main() level
                         40 (11%) worst case
               Stack:    5 locations

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   3B1
0003:  NOP
.................... // analog dijital dönüþtürücü ile step motoru ileri geri kontrol uygulamasý 
.................... // 27.08.2011 
.................... // yazan = Remzi ÞAHÝNOÐLU 
....................  
.................... #if defined(__PCM__) 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=10    // dahili adc 10 bit olarak ayarlanmýstýr 
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP, NOBROWNOUT, NOPUT, NOWRT, NODEBUG, NOCPD 
.................... #use delay(clock=4000000) 
*
0022:  MOVLW  37
0023:  MOVWF  04
0024:  BCF    03.7
0025:  MOVF   00,W
0026:  BTFSC  03.2
0027:  GOTO   036
0028:  MOVLW  01
0029:  MOVWF  78
002A:  CLRF   77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  DECFSZ 78,F
002E:  GOTO   02A
002F:  MOVLW  4A
0030:  MOVWF  77
0031:  DECFSZ 77,F
0032:  GOTO   031
0033:  GOTO   034
0034:  DECFSZ 00,F
0035:  GOTO   028
0036:  RETURN
.................... #use fast_io(c) 
.................... #use fast_io(d) 
.................... #use fast_io(e) 
.................... #define use_portb_lcd TRUE             // lcd bilgisi için port b’yi kullanýyoruz 
.................... #include <lcd416.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                        free licence                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x28 | (lcd_type << 2), 0x0C, 1, 6}; 
....................                              // 0x28 = 5x8 dot matrix 
....................                              // 0x0C = display kapalý ve imlec alt çizgi gözükmez ve yanýp sönmez 
....................                              // 1 lcd yi temizle 
....................                              // 6 imleci saða kaydýr 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
*
0044:  MOVLW  F0
0045:  BSF    03.5
0046:  MOVWF  06
....................       lcd.rw = 1; 
0047:  BCF    03.5
0048:  BSF    06.2
....................       delay_cycles(1); 
0049:  NOP
....................       lcd.enable = 1; 
004A:  BSF    06.0
....................       delay_cycles(1); 
004B:  NOP
....................       high = lcd.data; 
004C:  MOVF   06,W
004D:  SWAPF  06,W
004E:  ANDLW  0F
004F:  MOVWF  3D
....................       lcd.enable = 0; 
0050:  BCF    06.0
....................       delay_cycles(1); 
0051:  NOP
....................       lcd.enable = 1; 
0052:  BSF    06.0
....................       delay_us(1); 
0053:  NOP
....................       low = lcd.data; 
0054:  MOVF   06,W
0055:  SWAPF  06,W
0056:  ANDLW  0F
0057:  MOVWF  3C
....................       lcd.enable = 0; 
0058:  BCF    06.0
....................       set_tris_b(LCD_WRITE); 
0059:  MOVLW  00
005A:  BSF    03.5
005B:  MOVWF  06
....................       return( (high<<4) | low); 
005C:  BCF    03.5
005D:  SWAPF  3D,W
005E:  MOVWF  77
005F:  MOVLW  F0
0060:  ANDWF  77,F
0061:  MOVF   77,W
0062:  IORWF  3C,W
0063:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0037:  SWAPF  3D,W
0038:  ANDLW  F0
0039:  MOVWF  77
003A:  MOVLW  0F
003B:  ANDWF  06,W
003C:  IORWF  77,W
003D:  MOVWF  06
....................       delay_cycles(1); 
003E:  NOP
....................       lcd.enable = 1; 
003F:  BSF    06.0
....................       delay_us(2); 
0040:  GOTO   041
....................       lcd.enable = 0; 
0041:  BCF    06.0
.................... } 
0042:  RETURN
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0043:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0064:  MOVF   78,W
0065:  MOVWF  3C
0066:  BTFSC  3C.7
0067:  GOTO   044
....................       lcd.rs = address; 
0068:  BTFSS  3A.0
0069:  BCF    06.1
006A:  BTFSC  3A.0
006B:  BSF    06.1
....................       delay_cycles(1); 
006C:  NOP
....................       lcd.rw = 0; 
006D:  BCF    06.2
....................       delay_cycles(1); 
006E:  NOP
....................       lcd.enable = 0; 
006F:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0070:  SWAPF  3B,W
0071:  MOVWF  3C
0072:  MOVLW  0F
0073:  ANDWF  3C,F
0074:  MOVF   3C,W
0075:  MOVWF  3D
0076:  CALL   037
....................       lcd_send_nibble(n & 0xf); 
0077:  MOVF   3B,W
0078:  ANDLW  0F
0079:  MOVWF  3C
007A:  MOVWF  3D
007B:  CALL   037
.................... } 
007C:  RETURN
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
007D:  MOVLW  00
007E:  BSF    03.5
007F:  MOVWF  06
....................     lcd.rs = 0; 
0080:  BCF    03.5
0081:  BCF    06.1
....................     lcd.rw = 0; 
0082:  BCF    06.2
....................     lcd.enable = 0; 
0083:  BCF    06.0
....................     delay_ms(15); 
0084:  MOVLW  0F
0085:  MOVWF  37
0086:  CALL   022
....................     for(i=1;i<=3;++i) { 
0087:  MOVLW  01
0088:  MOVWF  29
0089:  MOVF   29,W
008A:  SUBLW  03
008B:  BTFSS  03.0
008C:  GOTO   095
....................        lcd_send_nibble(3); 
008D:  MOVLW  03
008E:  MOVWF  3D
008F:  CALL   037
....................        delay_ms(5); 
0090:  MOVLW  05
0091:  MOVWF  37
0092:  CALL   022
....................     } 
0093:  INCF   29,F
0094:  GOTO   089
....................     lcd_send_nibble(2); 
0095:  MOVLW  02
0096:  MOVWF  3D
0097:  CALL   037
....................     for(i=0;i<=3;++i) 
0098:  CLRF   29
0099:  MOVF   29,W
009A:  SUBLW  03
009B:  BTFSS  03.0
009C:  GOTO   0A6
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
009D:  MOVF   29,W
009E:  CALL   004
009F:  MOVWF  2A
00A0:  CLRF   3A
00A1:  MOVF   2A,W
00A2:  MOVWF  3B
00A3:  CALL   043
00A4:  INCF   29,F
00A5:  GOTO   099
.................... } 
00A6:  BCF    0A.3
00A7:  BCF    0A.4
00A8:  GOTO   3ED (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
00A9:  MOVLW  01
00AA:  SUBWF  38,W
00AB:  ADDLW  FC
00AC:  BTFSC  03.0
00AD:  GOTO   0BC
00AE:  ADDLW  04
00AF:  GOTO   0C6
....................      case 1 : address=0x80;break;   // 1. satýr ilk adresi 
00B0:  MOVLW  80
00B1:  MOVWF  39
00B2:  GOTO   0BC
....................      case 2 : address=0xc0;break;   // 2. satýr ilk adresi 
00B3:  MOVLW  C0
00B4:  MOVWF  39
00B5:  GOTO   0BC
....................      case 3 : address=0x90;break;   // 3. satýr ilk adresi 0x94 yerine 0x90 olmalý 
00B6:  MOVLW  90
00B7:  MOVWF  39
00B8:  GOTO   0BC
....................      case 4 : address=0xd0;break;   // 4. satýr ilk adresi 0xd4 yerine 0xd0 olmalý 
00B9:  MOVLW  D0
00BA:  MOVWF  39
00BB:  GOTO   0BC
....................    } 
....................    address+=x-1; 
00BC:  MOVLW  01
00BD:  SUBWF  37,W
00BE:  ADDWF  39,F
....................    lcd_send_byte(0,address); 
00BF:  CLRF   3A
00C0:  MOVF   39,W
00C1:  MOVWF  3B
00C2:  CALL   043
.................... } 
00C3:  BCF    0A.3
00C4:  BCF    0A.4
00C5:  GOTO   0F5 (RETURN)
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
00CE:  MOVF   36,W
00CF:  XORLW  0C
00D0:  BTFSC  03.2
00D1:  GOTO   0D9
00D2:  XORLW  06
00D3:  BTFSC  03.2
00D4:  GOTO   0E3
00D5:  XORLW  02
00D6:  BTFSC  03.2
00D7:  GOTO   0EA
00D8:  GOTO   0EF
....................      case '\f'   : lcd_send_byte(0,1); 
00D9:  CLRF   3A
00DA:  MOVLW  01
00DB:  MOVWF  3B
00DC:  CALL   043
....................                    lcdline=1; 
00DD:  MOVLW  01
00DE:  MOVWF  20
....................                    delay_ms(2); 
00DF:  MOVLW  02
00E0:  MOVWF  37
00E1:  CALL   022
....................                                            break; 
00E2:  GOTO   0F5
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
00E3:  INCF   20,F
00E4:  MOVLW  01
00E5:  MOVWF  37
00E6:  MOVF   20,W
00E7:  MOVWF  38
00E8:  GOTO   0A9
00E9:  GOTO   0F5
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00EA:  CLRF   3A
00EB:  MOVLW  10
00EC:  MOVWF  3B
00ED:  CALL   043
00EE:  GOTO   0F5
....................      default     : lcd_send_byte(1,c);     break; 
00EF:  MOVLW  01
00F0:  MOVWF  3A
00F1:  MOVF   36,W
00F2:  MOVWF  3B
00F3:  CALL   043
00F4:  GOTO   0F5
....................    } 
.................... } 
00F5:  RETURN
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #endif 
....................  
.................... /* 
.................... #INT_AD 
.................... void ADC_kesmesi()      // adc okumasý bittiginde kesme oluþtur 
.................... { 
....................    output_high(PIN_C5); 
....................    delay_ms(200);          // uyarýyý burasý veriyor 
....................    output_low(PIN_C5); 
.................... } 
.................... */ 
....................  
.................... unsigned long int bilgi=0, eski_bilgi=0; 
.................... float voltaj; 
....................                                                   
.................... void main()               
.................... { 
*
03B1:  CLRF   04
03B2:  BCF    03.7
03B3:  MOVLW  1F
03B4:  ANDWF  03,F
03B5:  CLRF   22
03B6:  CLRF   21
03B7:  CLRF   24
03B8:  CLRF   23
03B9:  BSF    03.5
03BA:  BSF    1F.0
03BB:  BSF    1F.1
03BC:  BSF    1F.2
03BD:  BCF    1F.3
03BE:  MOVLW  07
03BF:  MOVWF  1C
....................    setup_psp(PSP_DISABLED); 
03C0:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
03C1:  BCF    03.5
03C2:  BCF    14.5
03C3:  MOVLW  01
03C4:  MOVWF  14
03C5:  MOVLW  00
03C6:  BSF    03.5
03C7:  MOVWF  14
....................    setup_timer_1(T1_DISABLED); 
03C8:  BCF    03.5
03C9:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
03CA:  MOVWF  78
03CB:  MOVWF  12
03CC:  MOVLW  00
03CD:  BSF    03.5
03CE:  MOVWF  12
....................    setup_CCP1(CCP_OFF); 
03CF:  BCF    03.5
03D0:  CLRF   17
....................    setup_CCP2(CCP_OFF); 
03D1:  CLRF   1D
....................     
....................    set_tris_c(0x00); 
03D2:  BSF    03.5
03D3:  MOVWF  07
....................    set_tris_d(0x00); 
03D4:  MOVWF  08
....................    set_tris_e(0x0F); 
03D5:  BSF    09.0
03D6:  BSF    09.1
03D7:  BSF    09.2
....................     
....................    output_c(0x00); 
03D8:  BCF    03.5
03D9:  CLRF   07
....................    output_d(0x00); 
03DA:  CLRF   08
....................     
....................    setup_adc(adc_clock_div_32);     // adc clock frenkansý fosc/32 
03DB:  BSF    03.5
03DC:  BCF    1F.6
03DD:  BCF    03.5
03DE:  BCF    1F.6
03DF:  BSF    1F.7
03E0:  BSF    03.5
03E1:  BSF    1F.7
03E2:  BCF    03.5
03E3:  BSF    1F.0
....................    setup_adc_ports(ALL_ANALOG); 
03E4:  BSF    03.5
03E5:  BCF    1F.0
03E6:  BCF    1F.1
03E7:  BCF    1F.2
03E8:  BCF    1F.3
....................     
....................    //enable_interrupts(INT_AD); 
....................    enable_interrupts(GLOBAL); 
03E9:  MOVLW  C0
03EA:  BCF    03.5
03EB:  IORWF  0B,F
....................     
....................    lcd_init(); 
03EC:  GOTO   07D
....................    printf(lcd_putc, "\f ADC UYGULAMASI"); 
03ED:  MOVLW  0C
03EE:  BSF    03.6
03EF:  MOVWF  0D
03F0:  MOVLW  00
03F1:  MOVWF  0F
03F2:  BCF    03.6
03F3:  GOTO   0F6
....................    delay_ms(1000); 
03F4:  MOVLW  04
03F5:  MOVWF  29
03F6:  MOVLW  FA
03F7:  MOVWF  37
03F8:  CALL   022
03F9:  DECFSZ 29,F
03FA:  GOTO   3F6
....................        
....................    while(TRUE) 
....................    { 
....................       set_adc_channel(5); 
03FB:  MOVLW  28
03FC:  MOVWF  78
03FD:  MOVF   1F,W
03FE:  ANDLW  C7
03FF:  IORWF  78,W
0400:  MOVWF  1F
....................       delay_us(20); 
0401:  MOVLW  06
0402:  MOVWF  77
0403:  DECFSZ 77,F
0404:  GOTO   403
0405:  NOP
....................        
....................       bilgi = read_adc(); 
0406:  BSF    1F.2
0407:  BTFSC  1F.2
0408:  GOTO   407
0409:  BSF    03.5
040A:  MOVF   1E,W
040B:  BCF    03.5
040C:  MOVWF  21
040D:  MOVF   1E,W
040E:  MOVWF  22
....................       voltaj = 0.0048828125*bilgi;  // digitale cevirme iþlemi uygulanan sinyalin  
040F:  MOVF   22,W
0410:  MOVWF  2A
0411:  MOVF   21,W
0412:  MOVWF  29
0413:  GOTO   13E
0414:  CLRF   39
0415:  CLRF   38
0416:  MOVLW  20
0417:  MOVWF  37
0418:  MOVLW  77
0419:  MOVWF  36
041A:  MOVF   7A,W
041B:  MOVWF  3D
041C:  MOVF   79,W
041D:  MOVWF  3C
041E:  MOVF   78,W
041F:  MOVWF  3B
0420:  MOVF   77,W
0421:  MOVWF  3A
0422:  CALL   15D
0423:  MOVF   7A,W
0424:  MOVWF  28
0425:  MOVF   79,W
0426:  MOVWF  27
0427:  MOVF   78,W
0428:  MOVWF  26
0429:  MOVF   77,W
042A:  MOVWF  25
....................       // adc için hesaplana adým büyüklüðü: Vref / 2^10 = 5V/1024=0.0048828125 
....................        
....................       if(bilgi != eski_bilgi) 
042B:  MOVF   23,W
042C:  SUBWF  21,W
042D:  BTFSS  03.2
042E:  GOTO   433
042F:  MOVF   24,W
0430:  SUBWF  22,W
0431:  BTFSC  03.2
0432:  GOTO   46B
....................       { 
....................          eski_bilgi = bilgi; 
0433:  MOVF   22,W
0434:  MOVWF  24
0435:  MOVF   21,W
0436:  MOVWF  23
....................          lcd_send_byte(0, 0x01); 
0437:  CLRF   3A
0438:  MOVLW  01
0439:  MOVWF  3B
043A:  CALL   043
....................          printf(lcd_putc, "\fDigital: %lu" ,bilgi); 
043B:  MOVLW  15
043C:  BSF    03.6
043D:  MOVWF  0D
043E:  MOVLW  00
043F:  MOVWF  0F
0440:  BCF    03.0
0441:  MOVLW  0A
0442:  BCF    03.6
0443:  MOVWF  29
0444:  CALL   1D2
0445:  MOVLW  10
0446:  MOVWF  04
0447:  MOVF   22,W
0448:  MOVWF  2A
0449:  MOVF   21,W
044A:  MOVWF  29
044B:  GOTO   221
....................          printf(lcd_putc, "\nV: %2.6f V" ,voltaj); 
044C:  MOVLW  1C
044D:  BSF    03.6
044E:  MOVWF  0D
044F:  MOVLW  00
0450:  MOVWF  0F
0451:  BCF    03.0
0452:  MOVLW  04
0453:  BCF    03.6
0454:  MOVWF  29
0455:  CALL   1D2
0456:  MOVLW  89
0457:  MOVWF  04
0458:  MOVF   28,W
0459:  MOVWF  2C
045A:  MOVF   27,W
045B:  MOVWF  2B
045C:  MOVF   26,W
045D:  MOVWF  2A
045E:  MOVF   25,W
045F:  MOVWF  29
0460:  MOVLW  06
0461:  MOVWF  2D
0462:  GOTO   2C8
0463:  MOVLW  20
0464:  MOVWF  36
0465:  CALL   0CE
0466:  MOVLW  56
0467:  MOVWF  36
0468:  CALL   0CE
....................          output_d(bilgi); 
0469:  MOVF   21,W
046A:  MOVWF  08
....................       } 
....................       delay_ms(5); 
046B:  MOVLW  05
046C:  MOVWF  37
046D:  CALL   022
....................    } 
046E:  GOTO   3FB
.................... } 
046F:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
