CCS PCM C Compiler, Version 4.018, 44048               05-Eki-07 20:01

               Filename: F:\ramsi\private\picmicro\PIC C\pic uygulama\pic16f628a\step motor kontrol\unipolar\unipolar_step_baska.lst

               ROM used: 310 words (15%)
                         Largest free fragment is 1738
               RAM used: 7 (3%) at main() level
                         8 (4%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   019
0003:  NOP
.................... //unipolar step motor ileri-geri (tam adým) kontrol uygulamasý 
.................... //05.10.2007 
.................... //yazan = Remzi ÞAHÝNOÐLU 
.................... #if defined (__PCM__) 
.................... #include <16F628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #use delay(clock=4000000) 
*
0004:  MOVLW  22
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETLW  00
.................... #fuses NOWDT,PUT,NOLVP,NOBROWNOUT,NOMCLR,INTRC_IO,NOPROTECT 
.................... #endif 
....................  
.................... #byte PORTB = 0x06 
.................... #byte i = 0x28 
.................... #byte tam_adim = 0x29 
....................  
.................... void main() 
.................... { 
0019:  CLRF   04
001A:  BCF    03.7
001B:  MOVLW  1F
001C:  ANDWF  03,F
001D:  MOVLW  07
001E:  MOVWF  1F
....................    delay_ms(500); 
001F:  MOVLW  02
0020:  MOVWF  21
0021:  MOVLW  FA
0022:  MOVWF  22
0023:  CALL   004
0024:  DECFSZ 21,F
0025:  GOTO   021
....................    tam_adim=i=0;  
0026:  CLRF   28
0027:  MOVF   28,W
0028:  MOVWF  29
....................     
....................    while(TRUE) 
....................    {   
....................       //////// YARIM ADIM KONTROL //////// 
....................       if(tam_adim == 0) 
0029:  MOVF   29,F
002A:  BTFSS  03.2
002B:  GOTO   0B3
....................       { 
....................          if(bit_test(PORTB,4)==0) 
002C:  BTFSC  06.4
002D:  GOTO   070
....................          { 
....................             delay_ms(50); 
002E:  MOVLW  32
002F:  MOVWF  22
0030:  CALL   004
....................             i=i+1; 
0031:  MOVLW  01
0032:  ADDWF  28,F
....................             if(i==9){i=1;} 
0033:  MOVF   28,W
0034:  SUBLW  09
0035:  BTFSS  03.2
0036:  GOTO   039
0037:  MOVLW  01
0038:  MOVWF  28
....................             switch (i) 
....................             {                                   // yarým adým kontrol 
0039:  MOVLW  01
003A:  SUBWF  28,W
003B:  ADDLW  F8
003C:  BTFSC  03.0
003D:  GOTO   070
003E:  ADDLW  08
003F:  GOTO   10E
....................                case 1:   output_a(8);   break;    
0040:  BSF    03.5
0041:  CLRF   05
0042:  MOVLW  08
0043:  BCF    03.5
0044:  MOVWF  05
0045:  GOTO   070
....................                case 2:   output_a(12);  break;    
0046:  BSF    03.5
0047:  CLRF   05
0048:  MOVLW  0C
0049:  BCF    03.5
004A:  MOVWF  05
004B:  GOTO   070
....................                case 3:   output_a(4);   break;    
004C:  BSF    03.5
004D:  CLRF   05
004E:  MOVLW  04
004F:  BCF    03.5
0050:  MOVWF  05
0051:  GOTO   070
....................                case 4:   output_a(6);   break; 
0052:  BSF    03.5
0053:  CLRF   05
0054:  MOVLW  06
0055:  BCF    03.5
0056:  MOVWF  05
0057:  GOTO   070
....................                case 5:   output_a(2);   break;    
0058:  BSF    03.5
0059:  CLRF   05
005A:  MOVLW  02
005B:  BCF    03.5
005C:  MOVWF  05
005D:  GOTO   070
....................                case 6:   output_a(3);   break;    
005E:  BSF    03.5
005F:  CLRF   05
0060:  MOVLW  03
0061:  BCF    03.5
0062:  MOVWF  05
0063:  GOTO   070
....................                case 7:   output_a(1);   break;    
0064:  BSF    03.5
0065:  CLRF   05
0066:  MOVLW  01
0067:  BCF    03.5
0068:  MOVWF  05
0069:  GOTO   070
....................                case 8:   output_a(9);   break; 
006A:  BSF    03.5
006B:  CLRF   05
006C:  MOVLW  09
006D:  BCF    03.5
006E:  MOVWF  05
006F:  GOTO   070
....................             } 
....................          } 
....................           
....................          if(bit_test(PORTB,5)==0) 
0070:  BTFSC  06.5
0071:  GOTO   0B3
....................          { 
....................             delay_ms(50); 
0072:  MOVLW  32
0073:  MOVWF  22
0074:  CALL   004
....................             i=i-1; 
0075:  MOVLW  01
0076:  SUBWF  28,F
....................             if(i<=0){i=8;} 
0077:  MOVF   28,F
0078:  BTFSS  03.2
0079:  GOTO   07C
007A:  MOVLW  08
007B:  MOVWF  28
....................             switch (i) 
....................             {                                   // yarým adým kontrol  
007C:  MOVLW  01
007D:  SUBWF  28,W
007E:  ADDLW  F8
007F:  BTFSC  03.0
0080:  GOTO   0B3
0081:  ADDLW  08
0082:  GOTO   11A
....................                case 1:   output_a(8);   break;    
0083:  BSF    03.5
0084:  CLRF   05
0085:  MOVLW  08
0086:  BCF    03.5
0087:  MOVWF  05
0088:  GOTO   0B3
....................                case 2:   output_a(12);  break;    
0089:  BSF    03.5
008A:  CLRF   05
008B:  MOVLW  0C
008C:  BCF    03.5
008D:  MOVWF  05
008E:  GOTO   0B3
....................                case 3:   output_a(4);   break;    
008F:  BSF    03.5
0090:  CLRF   05
0091:  MOVLW  04
0092:  BCF    03.5
0093:  MOVWF  05
0094:  GOTO   0B3
....................                case 4:   output_a(6);   break; 
0095:  BSF    03.5
0096:  CLRF   05
0097:  MOVLW  06
0098:  BCF    03.5
0099:  MOVWF  05
009A:  GOTO   0B3
....................                case 5:   output_a(2);   break;    
009B:  BSF    03.5
009C:  CLRF   05
009D:  MOVLW  02
009E:  BCF    03.5
009F:  MOVWF  05
00A0:  GOTO   0B3
....................                case 6:   output_a(3);   break;    
00A1:  BSF    03.5
00A2:  CLRF   05
00A3:  MOVLW  03
00A4:  BCF    03.5
00A5:  MOVWF  05
00A6:  GOTO   0B3
....................                case 7:   output_a(1);   break;    
00A7:  BSF    03.5
00A8:  CLRF   05
00A9:  MOVLW  01
00AA:  BCF    03.5
00AB:  MOVWF  05
00AC:  GOTO   0B3
....................                case 8:   output_a(9);   break;    
00AD:  BSF    03.5
00AE:  CLRF   05
00AF:  MOVLW  09
00B0:  BCF    03.5
00B1:  MOVWF  05
00B2:  GOTO   0B3
....................             } 
....................          } 
....................       } 
....................     
....................       //////// TAM ADIM KONTROL //////// 
....................       if(tam_adim == 1) 
00B3:  DECFSZ 29,W
00B4:  GOTO   10C
....................       { 
....................          if(bit_test(PORTB,4)==0) 
00B5:  BTFSC  06.4
00B6:  GOTO   0E1
....................          { 
....................             delay_ms(50); 
00B7:  MOVLW  32
00B8:  MOVWF  22
00B9:  CALL   004
....................             i=i+1; 
00BA:  MOVLW  01
00BB:  ADDWF  28,F
....................             if(i==5){i=1;} 
00BC:  MOVF   28,W
00BD:  SUBLW  05
00BE:  BTFSS  03.2
00BF:  GOTO   0C2
00C0:  MOVLW  01
00C1:  MOVWF  28
....................             switch (i) 
....................             {                                   // tam adým kontrol 
00C2:  MOVLW  01
00C3:  SUBWF  28,W
00C4:  ADDLW  FC
00C5:  BTFSC  03.0
00C6:  GOTO   0E1
00C7:  ADDLW  04
00C8:  GOTO   126
....................                case 1:   output_a(9);   break;    
00C9:  BSF    03.5
00CA:  CLRF   05
00CB:  MOVLW  09
00CC:  BCF    03.5
00CD:  MOVWF  05
00CE:  GOTO   0E1
....................                case 2:   output_a(12);  break;    
00CF:  BSF    03.5
00D0:  CLRF   05
00D1:  MOVLW  0C
00D2:  BCF    03.5
00D3:  MOVWF  05
00D4:  GOTO   0E1
....................                case 3:   output_a(6);   break;    
00D5:  BSF    03.5
00D6:  CLRF   05
00D7:  MOVLW  06
00D8:  BCF    03.5
00D9:  MOVWF  05
00DA:  GOTO   0E1
....................                case 4:   output_a(3);   break;    
00DB:  BSF    03.5
00DC:  CLRF   05
00DD:  MOVLW  03
00DE:  BCF    03.5
00DF:  MOVWF  05
00E0:  GOTO   0E1
....................             } 
....................          } 
....................           
....................          if(bit_test(PORTB,5)==0) 
00E1:  BTFSC  06.5
00E2:  GOTO   10C
....................          { 
....................             delay_ms(50); 
00E3:  MOVLW  32
00E4:  MOVWF  22
00E5:  CALL   004
....................             i=i-1; 
00E6:  MOVLW  01
00E7:  SUBWF  28,F
....................             if(i<=0){i=4;} 
00E8:  MOVF   28,F
00E9:  BTFSS  03.2
00EA:  GOTO   0ED
00EB:  MOVLW  04
00EC:  MOVWF  28
....................             switch (i) 
....................             {                                   // tam adým kontrol  
00ED:  MOVLW  01
00EE:  SUBWF  28,W
00EF:  ADDLW  FC
00F0:  BTFSC  03.0
00F1:  GOTO   10C
00F2:  ADDLW  04
00F3:  GOTO   12E
....................                case 1:   output_a(9);   break;    
00F4:  BSF    03.5
00F5:  CLRF   05
00F6:  MOVLW  09
00F7:  BCF    03.5
00F8:  MOVWF  05
00F9:  GOTO   10C
....................                case 2:   output_a(12);  break;   
00FA:  BSF    03.5
00FB:  CLRF   05
00FC:  MOVLW  0C
00FD:  BCF    03.5
00FE:  MOVWF  05
00FF:  GOTO   10C
....................                case 3:   output_a(6);   break;    
0100:  BSF    03.5
0101:  CLRF   05
0102:  MOVLW  06
0103:  BCF    03.5
0104:  MOVWF  05
0105:  GOTO   10C
....................                case 4:   output_a(3);   break;    
0106:  BSF    03.5
0107:  CLRF   05
0108:  MOVLW  03
0109:  BCF    03.5
010A:  MOVWF  05
010B:  GOTO   10C
....................             } 
....................          } 
....................       } 
....................    } 
010C:  GOTO   029
.................... } 
010D:  SLEEP

Configuration Fuses:
   Word  1: 3F10   NOWDT PUT NOPROTECT NOBROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
