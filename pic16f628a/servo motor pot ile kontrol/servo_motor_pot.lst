CCS PCM C Compiler, Version 4.106, 14749               27-Tem-11 18:10

               Filename: D:\ram\projeler\parellel robot - lisans bitirme tezi\elektronik\test\servo motor pot ile kontrol\servo_motor_pot.lst

               ROM used: 442 words (5%)
                         Largest free fragment is 2048
               RAM used: 29 (8%) at main() level
                         42 (11%) worst case
               Stack:    1 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   09D
0003:  NOP
.................... //pot ile servo motor kontrol programý  
.................... //22.06.2011 
.................... //yazan = Remzi ÞAHÝNOÐLU 
....................  
.................... /* 
.................... periyod 20ms, duty 1000us ile 2000us arasýnda deðiþebilir. 
....................  
.................... duty    konum (derece) 
.................... ----    ----- 
.................... 1000us  -90 
.................... 1500us  0 
.................... 2000us  +90 
.................... */ 
....................  
.................... #if defined(__PCM__) 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #device ADC=8    // dahili adc 8 bit olarak ayarlanmýstýr 
.................... #fuses XT, NOWDT, NOPROTECT, NOLVP, NOBROWNOUT, NOPUT, NOWRT, NODEBUG, NOCPD 
.................... #use delay(clock=4000000) 
*
0004:  MOVLW  35
0005:  MOVWF  04
0006:  BCF    03.7
0007:  MOVF   00,W
0008:  BTFSC  03.2
0009:  GOTO   018
000A:  MOVLW  01
000B:  MOVWF  78
000C:  CLRF   77
000D:  DECFSZ 77,F
000E:  GOTO   00D
000F:  DECFSZ 78,F
0010:  GOTO   00C
0011:  MOVLW  4A
0012:  MOVWF  77
0013:  DECFSZ 77,F
0014:  GOTO   013
0015:  GOTO   016
0016:  DECFSZ 00,F
0017:  GOTO   00A
0018:  RETURN
*
0089:  MOVLW  12
008A:  SUBWF  35,F
008B:  BTFSS  03.0
008C:  GOTO   09C
008D:  MOVLW  35
008E:  MOVWF  04
008F:  BCF    03.7
0090:  MOVLW  FC
0091:  ANDWF  00,F
0092:  BCF    03.0
0093:  RRF    00,F
0094:  RRF    00,F
0095:  MOVF   00,W
0096:  BTFSC  03.2
0097:  GOTO   09C
0098:  GOTO   09A
0099:  NOP
009A:  DECFSZ 00,F
009B:  GOTO   099
009C:  RETURN
.................... #use fast_io(c) 
.................... #use fast_io(b)  
.................... #endif 
....................  
.................... //#device PIC16F877 
....................  
.................... long long bilgi=0, eski_bilgi=0; 
.................... long long doluluk, periyod, bosluk; 
....................  
.................... void main() 
.................... { 
009D:  CLRF   04
009E:  BCF    03.7
009F:  MOVLW  1F
00A0:  ANDWF  03,F
00A1:  CLRF   23
00A2:  CLRF   22
00A3:  CLRF   21
00A4:  CLRF   20
00A5:  CLRF   27
00A6:  CLRF   26
00A7:  CLRF   25
00A8:  CLRF   24
00A9:  BSF    03.5
00AA:  BSF    1F.0
00AB:  BSF    1F.1
00AC:  BSF    1F.2
00AD:  BCF    1F.3
00AE:  MOVLW  07
00AF:  MOVWF  1C
....................    setup_PSP(PSP_DISABLED); 
00B0:  BCF    09.4
....................    setup_spi(SPI_SS_DISABLED); 
00B1:  BCF    03.5
00B2:  BCF    14.5
00B3:  MOVLW  01
00B4:  MOVWF  14
00B5:  MOVLW  00
00B6:  BSF    03.5
00B7:  MOVWF  14
....................    setup_timer_1(T1_DISABLED); 
00B8:  BCF    03.5
00B9:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); 
00BA:  MOVWF  78
00BB:  MOVWF  12
00BC:  MOVLW  00
00BD:  BSF    03.5
00BE:  MOVWF  12
....................    setup_CCP1(CCP_OFF); 
00BF:  BCF    03.5
00C0:  CLRF   17
....................    setup_CCP2(CCP_OFF); 
00C1:  CLRF   1D
....................     
....................    set_tris_c(0x80); 
00C2:  MOVLW  80
00C3:  BSF    03.5
00C4:  MOVWF  07
....................    set_tris_b(0x00); 
00C5:  MOVLW  00
00C6:  MOVWF  06
....................        
....................    output_low(pin_c5); 
00C7:  BCF    03.5
00C8:  BCF    07.5
....................    output_d(0xF0); 
00C9:  BSF    03.5
00CA:  CLRF   08
00CB:  MOVLW  F0
00CC:  BCF    03.5
00CD:  MOVWF  08
....................    delay_ms(300); 
00CE:  MOVLW  02
00CF:  MOVWF  34
00D0:  MOVLW  96
00D1:  MOVWF  35
00D2:  CALL   004
00D3:  DECFSZ 34,F
00D4:  GOTO   0D0
....................    output_d(0x00); 
00D5:  BSF    03.5
00D6:  CLRF   08
00D7:  BCF    03.5
00D8:  CLRF   08
....................    delay_ms(300); 
00D9:  MOVLW  02
00DA:  MOVWF  34
00DB:  MOVLW  96
00DC:  MOVWF  35
00DD:  CALL   004
00DE:  DECFSZ 34,F
00DF:  GOTO   0DB
....................    output_d(0x0F); 
00E0:  BSF    03.5
00E1:  CLRF   08
00E2:  MOVLW  0F
00E3:  BCF    03.5
00E4:  MOVWF  08
....................    delay_ms(300); 
00E5:  MOVLW  02
00E6:  MOVWF  34
00E7:  MOVLW  96
00E8:  MOVWF  35
00E9:  CALL   004
00EA:  DECFSZ 34,F
00EB:  GOTO   0E7
....................    output_d(0x00); 
00EC:  BSF    03.5
00ED:  CLRF   08
00EE:  BCF    03.5
00EF:  CLRF   08
....................     
....................    setup_adc_ports(ALL_ANALOG); 
00F0:  BSF    03.5
00F1:  BCF    1F.0
00F2:  BCF    1F.1
00F3:  BCF    1F.2
00F4:  BCF    1F.3
....................    setup_adc(ADC_CLOCK_DIV_8); 
00F5:  BCF    1F.6
00F6:  BCF    03.5
00F7:  BSF    1F.6
00F8:  BCF    1F.7
00F9:  BSF    03.5
00FA:  BCF    1F.7
00FB:  BCF    03.5
00FC:  BSF    1F.0
....................    set_adc_channel(5); 
00FD:  MOVLW  28
00FE:  MOVWF  78
00FF:  MOVF   1F,W
0100:  ANDLW  C7
0101:  IORWF  78,W
0102:  MOVWF  1F
....................    delay_us(30); 
0103:  MOVLW  09
0104:  MOVWF  77
0105:  DECFSZ 77,F
0106:  GOTO   105
0107:  GOTO   108
....................     
....................    disable_interrupts(GLOBAL); 
0108:  BCF    0B.6
0109:  BCF    0B.7
010A:  BTFSC  0B.7
010B:  GOTO   109
....................     
....................    periyod = 20000;                      // pwm periyodu = 20ms   olarak ayarladýk 
010C:  CLRF   2F
010D:  CLRF   2E
010E:  MOVLW  4E
010F:  MOVWF  2D
0110:  MOVLW  20
0111:  MOVWF  2C
....................    doluluk = 1500;                       // doluluk oranýný ilk olarak motoru orta konuma getirmek için 1.5ms olarak ayarlandý 
0112:  CLRF   2B
0113:  CLRF   2A
0114:  MOVLW  05
0115:  MOVWF  29
0116:  MOVLW  DC
0117:  MOVWF  28
....................    bosluk = periyod - doluluk;           // boþluðu hesapla ilk enerji verildiðinde sorun çýkmasýn 
0118:  MOVF   28,W
0119:  SUBWF  2C,W
011A:  MOVWF  30
011B:  MOVF   2D,W
011C:  MOVWF  31
011D:  MOVF   29,W
011E:  BTFSS  03.0
011F:  INCFSZ 29,W
0120:  SUBWF  31,F
0121:  MOVF   2E,W
0122:  MOVWF  32
0123:  MOVF   2A,W
0124:  BTFSS  03.0
0125:  INCFSZ 2A,W
0126:  SUBWF  32,F
0127:  MOVF   2F,W
0128:  MOVWF  33
0129:  MOVF   2B,W
012A:  BTFSS  03.0
012B:  INCFSZ 2B,W
012C:  SUBWF  33,F
....................     
....................    while(TRUE) 
....................    { 
....................       bilgi = read_adc(); 
012D:  BSF    1F.2
012E:  BTFSC  1F.2
012F:  GOTO   12E
0130:  MOVF   1E,W
0131:  CLRF   23
0132:  CLRF   22
0133:  CLRF   21
0134:  MOVWF  20
....................        
....................       if(bilgi != eski_bilgi) 
0135:  MOVF   24,W
0136:  SUBWF  20,W
0137:  BTFSS  03.2
0138:  GOTO   145
0139:  MOVF   25,W
013A:  SUBWF  21,W
013B:  BTFSS  03.2
013C:  GOTO   145
013D:  MOVF   26,W
013E:  SUBWF  22,W
013F:  BTFSS  03.2
0140:  GOTO   145
0141:  MOVF   27,W
0142:  SUBWF  23,W
0143:  BTFSC  03.2
0144:  GOTO   19C
....................       { 
....................          eski_bilgi = bilgi; 
0145:  MOVF   23,W
0146:  MOVWF  27
0147:  MOVF   22,W
0148:  MOVWF  26
0149:  MOVF   21,W
014A:  MOVWF  25
014B:  MOVF   20,W
014C:  MOVWF  24
....................          // adc bilgisini servo için duty cycle süresini cevir 
....................          doluluk = (1400*bilgi)/255 + 600; 
014D:  CLRF   37
014E:  CLRF   36
014F:  MOVLW  05
0150:  MOVWF  35
0151:  MOVLW  78
0152:  MOVWF  34
0153:  MOVF   23,W
0154:  MOVWF  3B
0155:  MOVF   22,W
0156:  MOVWF  3A
0157:  MOVF   21,W
0158:  MOVWF  39
0159:  MOVF   20,W
015A:  MOVWF  38
015B:  GOTO   019
015C:  MOVF   7A,W
015D:  MOVWF  37
015E:  MOVF   79,W
015F:  MOVWF  36
0160:  MOVF   78,W
0161:  MOVWF  35
0162:  MOVF   77,W
0163:  MOVWF  34
0164:  MOVF   7A,W
0165:  MOVWF  3B
0166:  MOVF   79,W
0167:  MOVWF  3A
0168:  MOVF   78,W
0169:  MOVWF  39
016A:  MOVF   77,W
016B:  MOVWF  38
016C:  CLRF   3F
016D:  CLRF   3E
016E:  CLRF   3D
016F:  MOVLW  FF
0170:  MOVWF  3C
0171:  GOTO   045
0172:  MOVLW  58
0173:  ADDWF  77,W
0174:  MOVWF  28
0175:  MOVF   78,W
0176:  MOVWF  29
0177:  MOVLW  02
0178:  BTFSC  03.0
0179:  MOVLW  03
017A:  ADDWF  29,F
017B:  MOVF   79,W
017C:  MOVWF  2A
017D:  MOVLW  00
017E:  BTFSC  03.0
017F:  MOVLW  01
0180:  ADDWF  2A,F
0181:  MOVF   7A,W
0182:  MOVWF  2B
0183:  MOVLW  00
0184:  BTFSC  03.0
0185:  MOVLW  01
0186:  ADDWF  2B,F
....................          bosluk = periyod - doluluk; 
0187:  MOVF   28,W
0188:  SUBWF  2C,W
0189:  MOVWF  30
018A:  MOVF   2D,W
018B:  MOVWF  31
018C:  MOVF   29,W
018D:  BTFSS  03.0
018E:  INCFSZ 29,W
018F:  SUBWF  31,F
0190:  MOVF   2E,W
0191:  MOVWF  32
0192:  MOVF   2A,W
0193:  BTFSS  03.0
0194:  INCFSZ 2A,W
0195:  SUBWF  32,F
0196:  MOVF   2F,W
0197:  MOVWF  33
0198:  MOVF   2B,W
0199:  BTFSS  03.0
019A:  INCFSZ 2B,W
019B:  SUBWF  33,F
....................       } 
....................        
....................       output_high(PIN_B3);                          // PWM çýkýþ PORTB nin 3. bitinden (RB3) 
019C:  BSF    06.3
....................       delay_us(doluluk);                                            
019D:  MOVF   29,W
019E:  MOVWF  34
019F:  INCF   34,F
01A0:  DECF   34,F
01A1:  BTFSC  03.2
01A2:  GOTO   1A7
01A3:  MOVLW  FF
01A4:  MOVWF  35
01A5:  CALL   089
01A6:  GOTO   1A0
01A7:  MOVF   28,W
01A8:  MOVWF  35
01A9:  CALL   089
....................       output_low(PIN_B3); 
01AA:  BCF    06.3
....................       delay_us(bosluk); 
01AB:  MOVF   31,W
01AC:  MOVWF  34
01AD:  INCF   34,F
01AE:  DECF   34,F
01AF:  BTFSC  03.2
01B0:  GOTO   1B5
01B1:  MOVLW  FF
01B2:  MOVWF  35
01B3:  CALL   089
01B4:  GOTO   1AE
01B5:  MOVF   30,W
01B6:  MOVWF  35
01B7:  CALL   089
....................    } 
01B8:  GOTO   12D
.................... } 
....................  
01B9:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NODEBUG NOPROTECT NOBROWNOUT NOLVP NOCPD NOWRT
