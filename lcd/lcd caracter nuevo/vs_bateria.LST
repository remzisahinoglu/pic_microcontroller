CCS PCM C Compiler, Version 4.068, 53748               28-Tem-08 14:33

               Filename: C:\Documents and Settings\ugur\Desktop\lcd\lcd caracter nuevo\vs_bateria.lst

               ROM used: 458 words (11%)
                         Largest free fragment is 2048
               RAM used: 56 (22%) at main() level
                         66 (26%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   15B
0003:  NOP
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... //                     VsZeNeR'05       
.................... //                   30/Septiembre/05 
.................... //                  vszener@gmail.com 
.................... //   Programa:   Bateria 
.................... //   Version:   0.0 
.................... // 
.................... //   Dispositivo: PIC 16F648A         Compilador:    CCS vs3.227 
.................... //   Entorno IDE: MPLAB IDE v7.21      Simulador:    Proteus 6.7sp3 
.................... // 
.................... //   Notas: Se muestra por pantalla de lcd(LM016L) la animacion de carga de  
.................... //         una bateria, para ello se han diseñado nuevos caracteres y almacenados 
.................... //         en la memoria GCRAM de la lcd, solo se ha usado una posicion de memoria 
.................... //         de dicha GCRAM. Tener en cuenta que hay que poner la directiva NOLVP para  
.................... //         que el pin B4 sea de salida.  
.................... // 
.................... //   Conexiones:      B0 -> E             
.................... //               B1 -> RS          
.................... //               B2 -> RW       
.................... //               B4 -> D4         
.................... //               B5 -> D5             
.................... //               B6 -> D6    
.................... //               B7 -> D7                    
.................... ////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <16f648a.h>                 
.................... //////// Standard Header file for the PIC16F648A device //////////////// 
.................... #device PIC16F648A 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT,NOLVP       
.................... #use delay (clock=4000000)          
*
001C:  MOVLW  53
001D:  MOVWF  04
001E:  BCF    03.7
001F:  MOVF   00,W
0020:  BTFSC  03.2
0021:  GOTO   030
0022:  MOVLW  01
0023:  MOVWF  78
0024:  CLRF   77
0025:  DECFSZ 77,F
0026:  GOTO   025
0027:  DECFSZ 78,F
0028:  GOTO   024
0029:  MOVLW  4A
002A:  MOVWF  77
002B:  DECFSZ 77,F
002C:  GOTO   02B
002D:  GOTO   02E
002E:  DECFSZ 00,F
002F:  GOTO   022
0030:  RETLW  00
.................... #define use_portb_lcd TRUE 
.................... #include <lcd.c>               
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
003E:  MOVLW  F0
003F:  TRIS   6
....................       lcd.rw = 1; 
0040:  BSF    06.2
....................       delay_cycles(1); 
0041:  NOP
....................       lcd.enable = 1; 
0042:  BSF    06.0
....................       delay_cycles(1); 
0043:  NOP
....................       high = lcd.data; 
0044:  MOVF   06,W
0045:  SWAPF  06,W
0046:  ANDLW  0F
0047:  MOVWF  5A
....................       lcd.enable = 0; 
0048:  BCF    06.0
....................       delay_cycles(1); 
0049:  NOP
....................       lcd.enable = 1; 
004A:  BSF    06.0
....................       delay_us(1); 
004B:  NOP
....................       low = lcd.data; 
004C:  MOVF   06,W
004D:  SWAPF  06,W
004E:  ANDLW  0F
004F:  MOVWF  59
....................       lcd.enable = 0; 
0050:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
0051:  MOVLW  00
0052:  TRIS   6
....................       return( (high<<4) | low); 
0053:  SWAPF  5A,W
0054:  MOVWF  77
0055:  MOVLW  F0
0056:  ANDWF  77,F
0057:  MOVF   77,W
0058:  IORWF  59,W
0059:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0031:  SWAPF  5A,W
0032:  ANDLW  F0
0033:  MOVWF  77
0034:  MOVLW  0F
0035:  ANDWF  06,W
0036:  IORWF  77,W
0037:  MOVWF  06
....................       delay_cycles(1); 
0038:  NOP
....................       lcd.enable = 1; 
0039:  BSF    06.0
....................       delay_us(2); 
003A:  GOTO   03B
....................       lcd.enable = 0; 
003B:  BCF    06.0
.................... } 
003C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
003D:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
005A:  MOVF   78,W
005B:  MOVWF  59
005C:  BTFSC  59.7
005D:  GOTO   03E
....................       lcd.rs = address; 
005E:  BTFSS  57.0
005F:  BCF    06.1
0060:  BTFSC  57.0
0061:  BSF    06.1
....................       delay_cycles(1); 
0062:  NOP
....................       lcd.rw = 0; 
0063:  BCF    06.2
....................       delay_cycles(1); 
0064:  NOP
....................       lcd.enable = 0; 
0065:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0066:  SWAPF  58,W
0067:  MOVWF  59
0068:  MOVLW  0F
0069:  ANDWF  59,F
006A:  MOVF   59,W
006B:  MOVWF  5A
006C:  CALL   031
....................       lcd_send_nibble(n & 0xf); 
006D:  MOVF   58,W
006E:  ANDLW  0F
006F:  MOVWF  59
0070:  MOVWF  5A
0071:  CALL   031
.................... } 
0072:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0073:  MOVLW  00
0074:  TRIS   6
....................     lcd.rs = 0; 
0075:  BCF    06.1
....................     lcd.rw = 0; 
0076:  BCF    06.2
....................     lcd.enable = 0; 
0077:  BCF    06.0
....................     delay_ms(15); 
0078:  MOVLW  0F
0079:  MOVWF  53
007A:  CALL   01C
....................     for(i=1;i<=3;++i) { 
007B:  MOVLW  01
007C:  MOVWF  51
007D:  MOVF   51,W
007E:  SUBLW  03
007F:  BTFSS  03.0
0080:  GOTO   089
....................        lcd_send_nibble(3); 
0081:  MOVLW  03
0082:  MOVWF  5A
0083:  CALL   031
....................        delay_ms(5); 
0084:  MOVLW  05
0085:  MOVWF  53
0086:  CALL   01C
....................     } 
0087:  INCF   51,F
0088:  GOTO   07D
....................     lcd_send_nibble(2); 
0089:  MOVLW  02
008A:  MOVWF  5A
008B:  CALL   031
....................     for(i=0;i<=3;++i) 
008C:  CLRF   51
008D:  MOVF   51,W
008E:  SUBLW  03
008F:  BTFSS  03.0
0090:  GOTO   09A
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0091:  MOVF   51,W
0092:  CALL   004
0093:  MOVWF  52
0094:  CLRF   57
0095:  MOVF   52,W
0096:  MOVWF  58
0097:  CALL   03D
0098:  INCF   51,F
0099:  GOTO   08D
.................... } 
009A:  BCF    0A.3
009B:  GOTO   1AA (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
0123:  DECFSZ 54,W
0124:  GOTO   126
0125:  GOTO   129
....................      address=lcd_line_two; 
0126:  MOVLW  40
0127:  MOVWF  55
....................    else 
0128:  GOTO   12A
....................      address=0; 
0129:  CLRF   55
....................    address+=x-1; 
012A:  MOVLW  01
012B:  SUBWF  53,W
012C:  ADDWF  55,F
....................    lcd_send_byte(0,0x80|address); 
012D:  MOVF   55,W
012E:  IORLW  80
012F:  MOVWF  56
0130:  CLRF   57
0131:  MOVF   56,W
0132:  MOVWF  58
0133:  CALL   03D
.................... } 
0134:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
0135:  MOVF   52,W
0136:  XORLW  0C
0137:  BTFSC  03.2
0138:  GOTO   140
0139:  XORLW  06
013A:  BTFSC  03.2
013B:  GOTO   148
013C:  XORLW  02
013D:  BTFSC  03.2
013E:  GOTO   14E
013F:  GOTO   153
....................      case '\f'   : lcd_send_byte(0,1); 
0140:  CLRF   57
0141:  MOVLW  01
0142:  MOVWF  58
0143:  CALL   03D
....................                    delay_ms(2); 
0144:  MOVLW  02
0145:  MOVWF  53
0146:  CALL   01C
....................                                            break; 
0147:  GOTO   159
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0148:  MOVLW  01
0149:  MOVWF  53
014A:  MOVLW  02
014B:  MOVWF  54
014C:  CALL   123
014D:  GOTO   159
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
014E:  CLRF   57
014F:  MOVLW  10
0150:  MOVWF  58
0151:  CALL   03D
0152:  GOTO   159
....................      default     : lcd_send_byte(1,c);     break; 
0153:  MOVLW  01
0154:  MOVWF  57
0155:  MOVF   52,W
0156:  MOVWF  58
0157:  CALL   03D
0158:  GOTO   159
....................    } 
.................... } 
0159:  BCF    0A.3
015A:  GOTO   1B9 (RETURN)
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... void anim(void);       
.................... char cont=0;      //kartakter tablosu 
*
0161:  CLRF   20
....................    int8    bat0[]={0b00001110,0b00001010,0b00010001,0b00010001,0b00010001,0b000010001,0b00010001,0b00011111}, 
0162:  MOVLW  0E
0163:  MOVWF  21
0164:  MOVLW  0A
0165:  MOVWF  22
0166:  MOVLW  11
0167:  MOVWF  23
0168:  MOVWF  24
0169:  MOVWF  25
016A:  MOVWF  26
016B:  MOVWF  27
016C:  MOVLW  1F
016D:  MOVWF  28
.................... bat20[]={0b00001110,0b00001010,0b00010001,0b00010001,0b00010001,0b00010001,0b00011111,0b00011111}, 
016E:  MOVLW  0E
016F:  MOVWF  29
0170:  MOVLW  0A
0171:  MOVWF  2A
0172:  MOVLW  11
0173:  MOVWF  2B
0174:  MOVWF  2C
0175:  MOVWF  2D
0176:  MOVWF  2E
0177:  MOVLW  1F
0178:  MOVWF  2F
0179:  MOVWF  30
.................... bat40[]={0b00001110,0b00001010,0b00010001,0b00010001,0b00010001,0b00011111,0b00011111,0b00011111}, 
017A:  MOVLW  0E
017B:  MOVWF  31
017C:  MOVLW  0A
017D:  MOVWF  32
017E:  MOVLW  11
017F:  MOVWF  33
0180:  MOVWF  34
0181:  MOVWF  35
0182:  MOVLW  1F
0183:  MOVWF  36
0184:  MOVWF  37
0185:  MOVWF  38
.................... bat60[]={0b00001110,0b00001010,0b00010001,0b00010001,0b00011111,0b00011111,0b00011111,0b00011111}, 
0186:  MOVLW  0E
0187:  MOVWF  39
0188:  MOVLW  0A
0189:  MOVWF  3A
018A:  MOVLW  11
018B:  MOVWF  3B
018C:  MOVWF  3C
018D:  MOVLW  1F
018E:  MOVWF  3D
018F:  MOVWF  3E
0190:  MOVWF  3F
0191:  MOVWF  40
.................... bat80[]={0b00001110,0b00001010,0b00010001,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111}, 
0192:  MOVLW  0E
0193:  MOVWF  41
0194:  MOVLW  0A
0195:  MOVWF  42
0196:  MOVLW  11
0197:  MOVWF  43
0198:  MOVLW  1F
0199:  MOVWF  44
019A:  MOVWF  45
019B:  MOVWF  46
019C:  MOVWF  47
019D:  MOVWF  48
.................... bat100[]={0b00001110,0b00001010,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111,0b00011111};       
019E:  MOVLW  0E
019F:  MOVWF  49
01A0:  MOVLW  0A
01A1:  MOVWF  4A
01A2:  MOVLW  1F
01A3:  MOVWF  4B
01A4:  MOVWF  4C
01A5:  MOVWF  4D
01A6:  MOVWF  4E
01A7:  MOVWF  4F
01A8:  MOVWF  50
.................... void main(void) 
.................... { lcd_init();       
*
015B:  CLRF   04
015C:  BCF    03.7
015D:  MOVLW  1F
015E:  ANDWF  03,F
015F:  MOVLW  07
0160:  MOVWF  1F
*
01A9:  GOTO   073
....................   anim();         
01AA:  CALL   09C
....................    lcd_gotoxy(5,1);    
01AB:  MOVLW  05
01AC:  MOVWF  53
01AD:  MOVLW  01
01AE:  MOVWF  54
01AF:  CALL   123
....................    lcd_putc("BATARYA\n   ");     
01B0:  CLRF   51
01B1:  MOVF   51,W
01B2:  CALL   00C
01B3:  IORLW  00
01B4:  BTFSC  03.2
01B5:  GOTO   1BA
01B6:  INCF   51,F
01B7:  MOVWF  52
01B8:  GOTO   135
01B9:  GOTO   1B1
....................    for(;;){    
....................       lcd_gotoxy(2,1);       
01BA:  MOVLW  02
01BB:  MOVWF  53
01BC:  MOVLW  01
01BD:  MOVWF  54
01BE:  CALL   123
....................       lcd_send_byte(1,0);     
01BF:  MOVLW  01
01C0:  MOVWF  57
01C1:  CLRF   58
01C2:  CALL   03D
....................       delay_ms(250);          
01C3:  MOVLW  FA
01C4:  MOVWF  53
01C5:  CALL   01C
....................       cont++;               
01C6:  INCF   20,F
....................       anim();           
01C7:  CALL   09C
....................          }} 
01C8:  GOTO   1BA
.................... //Animasyon fonksiyonu 
.................... void anim(void){ 
....................    char i;        
01C9:  SLEEP
....................    lcd_send_byte(0,0x40);     
*
009C:  CLRF   57
009D:  MOVLW  40
009E:  MOVWF  58
009F:  CALL   03D
....................    switch(cont){   
00A0:  MOVF   20,W
00A1:  ADDLW  FA
00A2:  BTFSC  03.0
00A3:  GOTO   118
00A4:  ADDLW  06
00A5:  GOTO   119
....................       case 0: for(i=0;i<8;i++)   //batarya  0% 
00A6:  CLRF   51
00A7:  MOVF   51,W
00A8:  SUBLW  07
00A9:  BTFSS  03.0
00AA:  GOTO   0B8
....................                lcd_send_byte(1,bat0[i]);  
00AB:  MOVLW  21
00AC:  ADDWF  51,W
00AD:  MOVWF  04
00AE:  BCF    03.7
00AF:  MOVF   00,W
00B0:  MOVWF  52
00B1:  MOVLW  01
00B2:  MOVWF  57
00B3:  MOVF   52,W
00B4:  MOVWF  58
00B5:  CALL   03D
00B6:  INCF   51,F
00B7:  GOTO   0A7
....................             break; 
00B8:  GOTO   118
....................       case 1: for(i=0;i<8;i++)   //batarya  20% 
00B9:  CLRF   51
00BA:  MOVF   51,W
00BB:  SUBLW  07
00BC:  BTFSS  03.0
00BD:  GOTO   0CB
....................                lcd_send_byte(1,bat20[i]);  
00BE:  MOVLW  29
00BF:  ADDWF  51,W
00C0:  MOVWF  04
00C1:  BCF    03.7
00C2:  MOVF   00,W
00C3:  MOVWF  52
00C4:  MOVLW  01
00C5:  MOVWF  57
00C6:  MOVF   52,W
00C7:  MOVWF  58
00C8:  CALL   03D
00C9:  INCF   51,F
00CA:  GOTO   0BA
....................             break; 
00CB:  GOTO   118
....................       case 2: for(i=0;i<8;i++)   //batarya  40% 
00CC:  CLRF   51
00CD:  MOVF   51,W
00CE:  SUBLW  07
00CF:  BTFSS  03.0
00D0:  GOTO   0DE
....................                lcd_send_byte(1,bat40[i]);  
00D1:  MOVLW  31
00D2:  ADDWF  51,W
00D3:  MOVWF  04
00D4:  BCF    03.7
00D5:  MOVF   00,W
00D6:  MOVWF  52
00D7:  MOVLW  01
00D8:  MOVWF  57
00D9:  MOVF   52,W
00DA:  MOVWF  58
00DB:  CALL   03D
00DC:  INCF   51,F
00DD:  GOTO   0CD
....................             break; 
00DE:  GOTO   118
....................       case 3: for(i=0;i<8;i++)   //batarya  60% 
00DF:  CLRF   51
00E0:  MOVF   51,W
00E1:  SUBLW  07
00E2:  BTFSS  03.0
00E3:  GOTO   0F1
....................                lcd_send_byte(1,bat60[i]);  
00E4:  MOVLW  39
00E5:  ADDWF  51,W
00E6:  MOVWF  04
00E7:  BCF    03.7
00E8:  MOVF   00,W
00E9:  MOVWF  52
00EA:  MOVLW  01
00EB:  MOVWF  57
00EC:  MOVF   52,W
00ED:  MOVWF  58
00EE:  CALL   03D
00EF:  INCF   51,F
00F0:  GOTO   0E0
....................             break; 
00F1:  GOTO   118
....................       case 4: for(i=0;i<8;i++)   //batarya  80% 
00F2:  CLRF   51
00F3:  MOVF   51,W
00F4:  SUBLW  07
00F5:  BTFSS  03.0
00F6:  GOTO   104
....................                lcd_send_byte(1,bat80[i]);  
00F7:  MOVLW  41
00F8:  ADDWF  51,W
00F9:  MOVWF  04
00FA:  BCF    03.7
00FB:  MOVF   00,W
00FC:  MOVWF  52
00FD:  MOVLW  01
00FE:  MOVWF  57
00FF:  MOVF   52,W
0100:  MOVWF  58
0101:  CALL   03D
0102:  INCF   51,F
0103:  GOTO   0F3
....................             break; 
0104:  GOTO   118
....................       case 5: for(i=0;i<8;i++)   //batarya  100% 
0105:  CLRF   51
0106:  MOVF   51,W
0107:  SUBLW  07
0108:  BTFSS  03.0
0109:  GOTO   117
....................                lcd_send_byte(1,bat100[i]);  
010A:  MOVLW  49
010B:  ADDWF  51,W
010C:  MOVWF  04
010D:  BCF    03.7
010E:  MOVF   00,W
010F:  MOVWF  52
0110:  MOVLW  01
0111:  MOVWF  57
0112:  MOVF   52,W
0113:  MOVWF  58
0114:  CALL   03D
0115:  INCF   51,F
0116:  GOTO   106
....................                cont=0;          
0117:  CLRF   20
....................          } 
.................... }          
0118:  RETLW  00
....................  

Configuration Fuses:
   Word  1: 3F61   XT NOWDT PUT NOPROTECT BROWNOUT MCLR NOLVP NOCPD
