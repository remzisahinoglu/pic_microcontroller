CCS PCM C Compiler, Version 4.068, 53748               28-Tem-08 14:27

               Filename: C:\Documents and Settings\ugur\Desktop\lcd\lcd abecedario\vs_abecedario.lst

               ROM used: 309 words (8%)
                         Largest free fragment is 2048
               RAM used: 36 (14%) at main() level
                         46 (18%) worst case
               Stack:    4 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   0C3
0003:  NOP
.................... //////////////////////////////////////////////////////////////////////////////////// 
.................... //                     VsZeNeR'05       
.................... //                     26/Agosto/05 
.................... //                  vszener@gmail.com 
.................... //   Programa:   Abecedario 
.................... //   Version:   0.0 
.................... // 
.................... //   Dispositivo: PIC 16F648A         Compilador:    CCS vs3.227 
.................... //   Entorno IDE: MPLAB IDE v7.21      Simulador:    Proteus 6.7sp3 
.................... // 
.................... //   Notas: Se muestra por pantalla de lcd(LM016L) el abecedario y vuelta a empezar  
.................... //         Tener en cuenta que hay que poner la directiva NOLVP para que el pin B4 sea de  
.................... //         salida.  
.................... //            ·abecedario[] -> vector donde se almacena abecedario 
.................... //            ·x -> indice para vector abecedario e indice para columna lcd 
.................... //             ·y -> indice para fila lcd: y=1 -> Fila 1 
.................... //                                 y=2 -> Fila 2 
.................... //   Conexiones:      B0 -> E             
.................... //               B1 -> RS          
.................... //               B2 -> RW       
.................... //               B4 -> D4         
.................... //               B5 -> D5             
.................... //               B6 -> D6    
.................... //               B7 -> D7                    
.................... ////////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #include <16f648a.h>            //pic a utilizar           
.................... //////// Standard Header file for the PIC16F648A device //////////////// 
.................... #device PIC16F648A 
.................... #list 
....................  
.................... #fuses XT,NOWDT,NOPROTECT,PUT,NOLVP      //ordenes para el programador  
.................... #use delay (clock=4000000)         //Fosc=4Mhz 
000C:  MOVLW  40
000D:  MOVWF  04
000E:  BCF    03.7
000F:  MOVF   00,W
0010:  BTFSC  03.2
0011:  GOTO   020
0012:  MOVLW  01
0013:  MOVWF  78
0014:  CLRF   77
0015:  DECFSZ 77,F
0016:  GOTO   015
0017:  DECFSZ 78,F
0018:  GOTO   014
0019:  MOVLW  4A
001A:  MOVWF  77
001B:  DECFSZ 77,F
001C:  GOTO   01B
001D:  GOTO   01E
001E:  DECFSZ 00,F
001F:  GOTO   012
0020:  RETLW  00
.................... #define use_portb_lcd TRUE         //definir portb lcd 
.................... #include<lcd.c>                  //libreria manejo lcd 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                     The following have special meaning:           //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2007 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined use_portb_lcd 
....................    //#locate lcd = getenv("sfr:PORTB")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf81 
....................    #else 
....................     #locate lcd = 6 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    //#locate lcd = getenv("sfr:PORTD")    // This puts the entire structure over the port 
....................    #ifdef __pch__ 
....................     #locate lcd = 0xf83 
....................    #else 
....................     #locate lcd = 8 
....................    #endif 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
.................... #ifndef lcd_type 
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
002E:  MOVLW  F0
002F:  TRIS   6
....................       lcd.rw = 1; 
0030:  BSF    06.2
....................       delay_cycles(1); 
0031:  NOP
....................       lcd.enable = 1; 
0032:  BSF    06.0
....................       delay_cycles(1); 
0033:  NOP
....................       high = lcd.data; 
0034:  MOVF   06,W
0035:  SWAPF  06,W
0036:  ANDLW  0F
0037:  MOVWF  47
....................       lcd.enable = 0; 
0038:  BCF    06.0
....................       delay_cycles(1); 
0039:  NOP
....................       lcd.enable = 1; 
003A:  BSF    06.0
....................       delay_us(1); 
003B:  NOP
....................       low = lcd.data; 
003C:  MOVF   06,W
003D:  SWAPF  06,W
003E:  ANDLW  0F
003F:  MOVWF  46
....................       lcd.enable = 0; 
0040:  BCF    06.0
....................       set_tris_lcd(LCD_WRITE); 
0041:  MOVLW  00
0042:  TRIS   6
....................       return( (high<<4) | low); 
0043:  SWAPF  47,W
0044:  MOVWF  77
0045:  MOVLW  F0
0046:  ANDWF  77,F
0047:  MOVF   77,W
0048:  IORWF  46,W
0049:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0021:  SWAPF  47,W
0022:  ANDLW  F0
0023:  MOVWF  77
0024:  MOVLW  0F
0025:  ANDWF  06,W
0026:  IORWF  77,W
0027:  MOVWF  06
....................       delay_cycles(1); 
0028:  NOP
....................       lcd.enable = 1; 
0029:  BSF    06.0
....................       delay_us(2); 
002A:  GOTO   02B
....................       lcd.enable = 0; 
002B:  BCF    06.0
.................... } 
002C:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
002D:  BCF    06.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
004A:  MOVF   78,W
004B:  MOVWF  46
004C:  BTFSC  46.7
004D:  GOTO   02E
....................       lcd.rs = address; 
004E:  BTFSS  44.0
004F:  BCF    06.1
0050:  BTFSC  44.0
0051:  BSF    06.1
....................       delay_cycles(1); 
0052:  NOP
....................       lcd.rw = 0; 
0053:  BCF    06.2
....................       delay_cycles(1); 
0054:  NOP
....................       lcd.enable = 0; 
0055:  BCF    06.0
....................       lcd_send_nibble(n >> 4); 
0056:  SWAPF  45,W
0057:  MOVWF  46
0058:  MOVLW  0F
0059:  ANDWF  46,F
005A:  MOVF   46,W
005B:  MOVWF  47
005C:  CALL   021
....................       lcd_send_nibble(n & 0xf); 
005D:  MOVF   45,W
005E:  ANDLW  0F
005F:  MOVWF  46
0060:  MOVWF  47
0061:  CALL   021
.................... } 
0062:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
0063:  MOVLW  00
0064:  TRIS   6
....................     lcd.rs = 0; 
0065:  BCF    06.1
....................     lcd.rw = 0; 
0066:  BCF    06.2
....................     lcd.enable = 0; 
0067:  BCF    06.0
....................     delay_ms(15); 
0068:  MOVLW  0F
0069:  MOVWF  40
006A:  CALL   00C
....................     for(i=1;i<=3;++i) { 
006B:  MOVLW  01
006C:  MOVWF  3E
006D:  MOVF   3E,W
006E:  SUBLW  03
006F:  BTFSS  03.0
0070:  GOTO   079
....................        lcd_send_nibble(3); 
0071:  MOVLW  03
0072:  MOVWF  47
0073:  CALL   021
....................        delay_ms(5); 
0074:  MOVLW  05
0075:  MOVWF  40
0076:  CALL   00C
....................     } 
0077:  INCF   3E,F
0078:  GOTO   06D
....................     lcd_send_nibble(2); 
0079:  MOVLW  02
007A:  MOVWF  47
007B:  CALL   021
....................     for(i=0;i<=3;++i) 
007C:  CLRF   3E
007D:  MOVF   3E,W
007E:  SUBLW  03
007F:  BTFSS  03.0
0080:  GOTO   08A
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
0081:  MOVF   3E,W
0082:  CALL   004
0083:  MOVWF  3F
0084:  CLRF   44
0085:  MOVF   3F,W
0086:  MOVWF  45
0087:  CALL   02D
0088:  INCF   3E,F
0089:  GOTO   07D
.................... } 
008A:  BCF    0A.3
008B:  GOTO   102 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
008C:  DECFSZ 41,W
008D:  GOTO   08F
008E:  GOTO   092
....................      address=lcd_line_two; 
008F:  MOVLW  40
0090:  MOVWF  42
....................    else 
0091:  GOTO   093
....................      address=0; 
0092:  CLRF   42
....................    address+=x-1; 
0093:  MOVLW  01
0094:  SUBWF  40,W
0095:  ADDWF  42,F
....................    lcd_send_byte(0,0x80|address); 
0096:  MOVF   42,W
0097:  IORLW  80
0098:  MOVWF  43
0099:  CLRF   44
009A:  MOVF   43,W
009B:  MOVWF  45
009C:  CALL   02D
.................... } 
009D:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
009E:  MOVF   3F,W
009F:  XORLW  0C
00A0:  BTFSC  03.2
00A1:  GOTO   0A9
00A2:  XORLW  06
00A3:  BTFSC  03.2
00A4:  GOTO   0B1
00A5:  XORLW  02
00A6:  BTFSC  03.2
00A7:  GOTO   0B7
00A8:  GOTO   0BC
....................      case '\f'   : lcd_send_byte(0,1); 
00A9:  CLRF   44
00AA:  MOVLW  01
00AB:  MOVWF  45
00AC:  CALL   02D
....................                    delay_ms(2); 
00AD:  MOVLW  02
00AE:  MOVWF  40
00AF:  CALL   00C
....................                                            break; 
00B0:  GOTO   0C2
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
00B1:  MOVLW  01
00B2:  MOVWF  40
00B3:  MOVLW  02
00B4:  MOVWF  41
00B5:  CALL   08C
00B6:  GOTO   0C2
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
00B7:  CLRF   44
00B8:  MOVLW  10
00B9:  MOVWF  45
00BA:  CALL   02D
00BB:  GOTO   0C2
....................      default     : lcd_send_byte(1,c);     break; 
00BC:  MOVLW  01
00BD:  MOVWF  44
00BE:  MOVF   3F,W
00BF:  MOVWF  45
00C0:  CALL   02D
00C1:  GOTO   0C2
....................    } 
.................... } 
00C2:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................        
.................... ///PROGRAMA 
.................... void main(void) 
.................... { 
00C3:  CLRF   04
00C4:  BCF    03.7
00C5:  MOVLW  1F
00C6:  ANDWF  03,F
00C7:  MOVLW  07
00C8:  MOVWF  1F
....................    char alfabe[27]={' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'},x,y=1;   //tabla y variables definidas 
00C9:  MOVLW  20
00CA:  MOVWF  21
00CB:  MOVLW  61
00CC:  MOVWF  22
00CD:  MOVLW  62
00CE:  MOVWF  23
00CF:  MOVLW  63
00D0:  MOVWF  24
00D1:  MOVLW  64
00D2:  MOVWF  25
00D3:  MOVLW  65
00D4:  MOVWF  26
00D5:  MOVLW  66
00D6:  MOVWF  27
00D7:  MOVLW  67
00D8:  MOVWF  28
00D9:  MOVLW  68
00DA:  MOVWF  29
00DB:  MOVLW  69
00DC:  MOVWF  2A
00DD:  MOVLW  6A
00DE:  MOVWF  2B
00DF:  MOVLW  6B
00E0:  MOVWF  2C
00E1:  MOVLW  6C
00E2:  MOVWF  2D
00E3:  MOVLW  6D
00E4:  MOVWF  2E
00E5:  MOVLW  6E
00E6:  MOVWF  2F
00E7:  MOVLW  6F
00E8:  MOVWF  30
00E9:  MOVLW  70
00EA:  MOVWF  31
00EB:  MOVLW  71
00EC:  MOVWF  32
00ED:  MOVLW  72
00EE:  MOVWF  33
00EF:  MOVLW  73
00F0:  MOVWF  34
00F1:  MOVLW  74
00F2:  MOVWF  35
00F3:  MOVLW  75
00F4:  MOVWF  36
00F5:  MOVLW  76
00F6:  MOVWF  37
00F7:  MOVLW  77
00F8:  MOVWF  38
00F9:  MOVLW  78
00FA:  MOVWF  39
00FB:  MOVLW  79
00FC:  MOVWF  3A
00FD:  MOVLW  7A
00FE:  MOVWF  3B
00FF:  MOVLW  01
0100:  MOVWF  3D
....................        
....................    lcd_init();         //inicializa lcd 
0101:  GOTO   063
....................     
....................    do{                        //bucle... 
....................    for(x=1;x<27;x++){            //bucle para mostrar digito 
0102:  MOVLW  01
0103:  MOVWF  3C
0104:  MOVF   3C,W
0105:  SUBLW  1A
0106:  BTFSS  03.0
0107:  GOTO   12E
....................       if(y==1)               //1º fila del lcd 
0108:  DECFSZ 3D,W
0109:  GOTO   110
....................          lcd_gotoxy(x,y); 
010A:  MOVF   3C,W
010B:  MOVWF  40
010C:  MOVF   3D,W
010D:  MOVWF  41
010E:  CALL   08C
....................       else                  //2º fila del lcd 
010F:  GOTO   117
....................          lcd_gotoxy((x-16),y); 
0110:  MOVLW  10
0111:  SUBWF  3C,W
0112:  MOVWF  3E
0113:  MOVWF  40
0114:  MOVF   3D,W
0115:  MOVWF  41
0116:  CALL   08C
....................        
....................       if(x>15)               //¿ya esta completa la 1º fila del lcd? 
0117:  MOVF   3C,W
0118:  SUBLW  0F
0119:  BTFSC  03.0
011A:  GOTO   11D
....................          y=2;               //SI -> escribe en 2º fila 
011B:  MOVLW  02
011C:  MOVWF  3D
....................           
....................       printf(lcd_putc,"%c",alfabe[x]);   //muestra por pantalla el caracter   
011D:  MOVLW  21
011E:  ADDWF  3C,W
011F:  MOVWF  04
0120:  BCF    03.7
0121:  MOVF   00,W
0122:  MOVWF  3E
0123:  MOVWF  3F
0124:  CALL   09E
....................       delay_ms(300);                
0125:  MOVLW  02
0126:  MOVWF  3E
0127:  MOVLW  96
0128:  MOVWF  40
0129:  CALL   00C
012A:  DECFSZ 3E,F
012B:  GOTO   127
....................       } 
012C:  INCF   3C,F
012D:  GOTO   104
....................    printf(lcd_putc,"\f");   //borra pantalla del lcd 
012E:  MOVLW  0C
012F:  MOVWF  3F
0130:  CALL   09E
....................    y=1;               //restablece indice 
0131:  MOVLW  01
0132:  MOVWF  3D
....................    }while(TRUE);               //...infinito 
.................... } 
0133:  GOTO   102
0134:  SLEEP

Configuration Fuses:
   Word  1: 3F61   XT NOWDT PUT NOPROTECT BROWNOUT MCLR NOLVP NOCPD
