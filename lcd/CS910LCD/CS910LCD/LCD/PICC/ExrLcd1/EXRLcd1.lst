CCS PCM C Compiler, Version 3.249, 28193               29-Oct-07 21:03

               Filename: EXRLcd1.lst

               ROM used: 1280 words (16%)
                         Largest free fragment is 2048
               RAM used: 38 (22%) at main() level
                         63 (36%) worst case
               Stack:    5 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   463
0003:  NOP
.................... /* 
.................... File Name :EXRLcd.c 
.................... Description: explain the method of driving a simple 16X2 
.................... Alpha Numeric LCD in Nibble Mode(4 Wire Mode) 
.................... Write And Read a character on LCD Display 
.................... *****IMPORTANT****** 
.................... uses standard library available for lcd in PICC 
.................... */ 
....................  
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
.................... #list 
....................  
.................... #device ADC=10 
.................... #fuses HS,NOWDT,NOPROTECT,NOLVP 
.................... #use delay(clock=4000000) 
*
0030:  MOVLW  45
0031:  MOVWF  04
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   044
0035:  MOVLW  01
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  4A
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  NOP
0041:  NOP
0042:  DECFSZ 00,F
0043:  GOTO   035
0044:  RETLW  00
.................... #use rs232(baud=9600, xmit=PIN_C6, rcv=PIN_C7) 
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCDD.C                                //// 
.................... ////                 Driver for common LCD modules                     //// 
.................... ////                                                                   //// 
.................... ////  lcd_init()   Must be called before any other function.           //// 
.................... ////                                                                   //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.     //// 
.................... ////                      The following have special meaning:          //// 
.................... ////                      \f  Clear display                            //// 
.................... ////                      \n  Go to start of second line               //// 
.................... ////                      \b  Move back one position                   //// 
.................... ////                                                                   //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)    //// 
.................... ////                                                                   //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD         //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2003 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     D0  enable 
.................... //     D1  rs 
.................... //     D2  rw 
.................... //     D4  D4 
.................... //     D5  D5 
.................... //     D6  D6 
.................... //     D7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC D3 is not used. 
....................  
.................... // Un-comment the following define to use port B 
....................   
.................... // #define use_portb_lcd TRUE 
....................  
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN enable;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN unused;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
....................  
.................... #if defined(__PCH__) 
.................... #if defined use_portb_lcd 
....................    #byte lcd = 0xF81                   // This puts the entire structure 
.................... #else 
....................    #byte lcd = 0xF83                   // This puts the entire structure 
.................... #endif 
.................... #else 
.................... #if defined use_portb_lcd 
....................    #byte lcd = 6                  // on to port B (at address 6) 
.................... #else 
....................    #byte lcd = 8                  // on to port D (at address 8) 
.................... #endif 
.................... #endif 
....................  
.................... #if defined use_portb_lcd 
....................    #define set_tris_lcd(x) set_tris_b(x) 
.................... #else 
....................    #define set_tris_lcd(x) set_tris_d(x) 
.................... #endif 
....................  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #define lcd_line_two 0x40    // LCD RAM address for the second line 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................       set_tris_lcd(LCD_READ); 
*
0053:  MOVLW  F0
0054:  BSF    03.5
0055:  MOVWF  08
....................       lcd.rw = 1; 
0056:  BCF    03.5
0057:  BSF    08.2
....................       delay_cycles(1); 
0058:  NOP
....................       lcd.enable = 1; 
0059:  BSF    08.0
....................       delay_cycles(1); 
005A:  NOP
....................       high = lcd.data; 
005B:  MOVF   08,W
005C:  SWAPF  08,W
005D:  ANDLW  0F
005E:  MOVWF  4C
....................       lcd.enable = 0; 
005F:  BCF    08.0
....................       delay_cycles(1); 
0060:  NOP
....................       lcd.enable = 1; 
0061:  BSF    08.0
....................       delay_us(1); 
0062:  NOP
....................       low = lcd.data; 
0063:  MOVF   08,W
0064:  SWAPF  08,W
0065:  ANDLW  0F
0066:  MOVWF  4B
....................       lcd.enable = 0; 
0067:  BCF    08.0
....................       set_tris_lcd(LCD_WRITE); 
0068:  MOVLW  00
0069:  BSF    03.5
006A:  MOVWF  08
....................       return( (high<<4) | low); 
006B:  BCF    03.5
006C:  SWAPF  4C,W
006D:  MOVWF  77
006E:  MOVLW  F0
006F:  ANDWF  77,F
0070:  MOVF   77,W
0071:  IORWF  4B,W
0072:  MOVWF  78
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0045:  SWAPF  4C,W
0046:  ANDLW  F0
0047:  MOVWF  77
0048:  MOVLW  0F
0049:  ANDWF  08,W
004A:  IORWF  77,W
004B:  MOVWF  08
....................       delay_cycles(1); 
004C:  NOP
....................       lcd.enable = 1; 
004D:  BSF    08.0
....................       delay_us(2); 
004E:  NOP
004F:  NOP
....................       lcd.enable = 0; 
0050:  BCF    08.0
.................... } 
0051:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0052:  BCF    08.1
....................       while ( bit_test(lcd_read_byte(),7) ) ; 
*
0073:  MOVF   78,W
0074:  MOVWF  4B
0075:  BTFSC  4B.7
0076:  GOTO   053
....................       lcd.rs = address; 
0077:  BTFSS  49.0
0078:  BCF    08.1
0079:  BTFSC  49.0
007A:  BSF    08.1
....................       delay_cycles(1); 
007B:  NOP
....................       lcd.rw = 0; 
007C:  BCF    08.2
....................       delay_cycles(1); 
007D:  NOP
....................       lcd.enable = 0; 
007E:  BCF    08.0
....................       lcd_send_nibble(n >> 4); 
007F:  SWAPF  4A,W
0080:  MOVWF  4B
0081:  MOVLW  0F
0082:  ANDWF  4B,F
0083:  MOVF   4B,W
0084:  MOVWF  4C
0085:  CALL   045
....................       lcd_send_nibble(n & 0xf); 
0086:  MOVF   4A,W
0087:  ANDLW  0F
0088:  MOVWF  4B
0089:  MOVWF  4C
008A:  CALL   045
.................... } 
008B:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................     set_tris_lcd(LCD_WRITE); 
008C:  MOVLW  00
008D:  BSF    03.5
008E:  MOVWF  08
....................     lcd.rs = 0; 
008F:  BCF    03.5
0090:  BCF    08.1
....................     lcd.rw = 0; 
0091:  BCF    08.2
....................     lcd.enable = 0; 
0092:  BCF    08.0
....................     delay_ms(15); 
0093:  MOVLW  0F
0094:  MOVWF  45
0095:  CALL   030
....................     for(i=1;i<=3;++i) { 
0096:  MOVLW  01
0097:  MOVWF  3D
0098:  MOVF   3D,W
0099:  SUBLW  03
009A:  BTFSS  03.0
009B:  GOTO   0A4
....................        lcd_send_nibble(3); 
009C:  MOVLW  03
009D:  MOVWF  4C
009E:  CALL   045
....................        delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  45
00A1:  CALL   030
....................     } 
00A2:  INCF   3D,F
00A3:  GOTO   098
....................     lcd_send_nibble(2); 
00A4:  MOVLW  02
00A5:  MOVWF  4C
00A6:  CALL   045
....................     for(i=0;i<=3;++i) 
00A7:  CLRF   3D
00A8:  MOVF   3D,W
00A9:  SUBLW  03
00AA:  BTFSS  03.0
00AB:  GOTO   0B5
....................        lcd_send_byte(0,LCD_INIT_STRING[i]); 
00AC:  MOVF   3D,W
00AD:  CALL   004
00AE:  MOVWF  3E
00AF:  CLRF   49
00B0:  MOVF   3E,W
00B1:  MOVWF  4A
00B2:  CALL   052
00B3:  INCF   3D,F
00B4:  GOTO   0A8
.................... } 
00B5:  BCF    0A.3
00B6:  BCF    0A.4
00B7:  GOTO   4A6 (RETURN)
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    if(y!=1) 
*
021B:  DECFSZ 46,W
021C:  GOTO   21E
021D:  GOTO   221
....................      address=lcd_line_two; 
021E:  MOVLW  40
021F:  MOVWF  47
....................    else 
0220:  GOTO   222
....................      address=0; 
0221:  CLRF   47
....................    address+=x-1; 
0222:  MOVLW  01
0223:  SUBWF  45,W
0224:  ADDWF  47,F
....................    lcd_send_byte(0,0x80|address); 
0225:  MOVF   47,W
0226:  IORLW  80
0227:  MOVWF  48
0228:  CLRF   49
0229:  MOVF   48,W
022A:  MOVWF  4A
022B:  CALL   052
.................... } 
022C:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    switch (c) { 
*
0371:  MOVF   44,W
0372:  XORLW  0C
0373:  BTFSC  03.2
0374:  GOTO   37C
0375:  XORLW  06
0376:  BTFSC  03.2
0377:  GOTO   384
0378:  XORLW  02
0379:  BTFSC  03.2
037A:  GOTO   38A
037B:  GOTO   38F
....................      case '\f'   : lcd_send_byte(0,1); 
037C:  CLRF   49
037D:  MOVLW  01
037E:  MOVWF  4A
037F:  CALL   052
....................                    delay_ms(2); 
0380:  MOVLW  02
0381:  MOVWF  45
0382:  CALL   030
....................                                            break; 
0383:  GOTO   395
....................      case '\n'   : lcd_gotoxy(1,2);        break; 
0384:  MOVLW  01
0385:  MOVWF  45
0386:  MOVLW  02
0387:  MOVWF  46
0388:  CALL   21B
0389:  GOTO   395
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
038A:  CLRF   49
038B:  MOVLW  10
038C:  MOVWF  4A
038D:  CALL   052
038E:  GOTO   395
....................      default     : lcd_send_byte(1,c);     break; 
038F:  MOVLW  01
0390:  MOVWF  49
0391:  MOVF   44,W
0392:  MOVWF  4A
0393:  CALL   052
0394:  GOTO   395
....................    } 
.................... } 
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
.................... char  lcd_string[20]; 
.................... #define PORTC 0x07 
.................... #bit LED_IND1=PORTC.3 
.................... #bit LED_IND2=PORTC.4 
....................  
....................  
....................  
.................... void print_lcd(char *str) 
.................... { 
.................... 	byte cntr=0; 
*
0364:  CLRF   42
.................... 	 
.................... 	for (cntr=0;cntr<20;cntr++) 
0365:  CLRF   42
0366:  MOVF   42,W
0367:  SUBLW  13
0368:  BTFSS  03.0
0369:  GOTO   397
.................... 			lcd_putc(str[cntr]);		 
036A:  MOVF   41,W
036B:  ADDWF  42,W
036C:  MOVWF  04
036D:  MOVF   00,W
036E:  MOVWF  43
036F:  MOVF   43,W
0370:  MOVWF  44
*
0395:  INCF   42,F
0396:  GOTO   366
.................... } 
0397:  RETLW  00
....................  
.................... void PrintVoltage(float m_Volts) 
.................... { 
.................... lcd_gotoxy(1,1); 
0398:  MOVLW  01
0399:  MOVWF  45
039A:  MOVWF  46
039B:  CALL   21B
.................... sprintf(lcd_string,"Voltages= %3.3f    ",m_Volts); 
039C:  MOVLW  20
039D:  MOVWF  34
039E:  CLRF   41
039F:  MOVF   41,W
03A0:  CALL   00C
03A1:  INCF   41,F
03A2:  MOVWF  77
03A3:  MOVWF  4D
03A4:  CALL   22D
03A5:  MOVLW  0A
03A6:  SUBWF  41,W
03A7:  BTFSS  03.2
03A8:  GOTO   39F
03A9:  MOVLW  89
03AA:  MOVWF  04
03AB:  MOVF   40,W
03AC:  MOVWF  45
03AD:  MOVF   3F,W
03AE:  MOVWF  44
03AF:  MOVF   3E,W
03B0:  MOVWF  43
03B1:  MOVF   3D,W
03B2:  MOVWF  42
03B3:  MOVLW  03
03B4:  MOVWF  46
03B5:  GOTO   298
03B6:  MOVLW  04
03B7:  MOVWF  42
03B8:  MOVLW  20
03B9:  MOVWF  4D
03BA:  CALL   22D
03BB:  DECFSZ 42,F
03BC:  GOTO   3B8
*
0473:  BCF    03.5
0474:  CLRF   34
.................... print_lcd(lcd_string); 
*
03BD:  MOVLW  20
03BE:  MOVWF  41
03BF:  CALL   364
.................... } 
03C0:  BCF    0A.3
03C1:  BCF    0A.4
03C2:  GOTO   4F1 (RETURN)
.................... void PrintCounter(byte m_lng) 
.................... { 
.................... lcd_gotoxy(1,2); 
*
043F:  MOVLW  01
0440:  MOVWF  45
0441:  MOVLW  02
0442:  MOVWF  46
0443:  CALL   21B
.................... sprintf(lcd_string,"Counter= %d        ",m_lng); 
0444:  MOVLW  20
0445:  MOVWF  34
0446:  CLRF   3F
0447:  MOVF   3F,W
0448:  CALL   020
0449:  INCF   3F,F
044A:  MOVWF  77
044B:  MOVWF  4D
044C:  CALL   22D
044D:  MOVLW  09
044E:  SUBWF  3F,W
044F:  BTFSS  03.2
0450:  GOTO   447
0451:  MOVF   3E,W
0452:  MOVWF  40
0453:  MOVLW  1F
0454:  MOVWF  41
0455:  GOTO   3D8
0456:  MOVLW  08
0457:  MOVWF  40
0458:  MOVLW  20
0459:  MOVWF  4D
045A:  CALL   22D
045B:  DECFSZ 40,F
045C:  GOTO   458
.................... print_lcd(lcd_string); 
045D:  MOVLW  20
045E:  MOVWF  41
045F:  CALL   364
.................... } 
0460:  BCF    0A.3
0461:  BCF    0A.4
0462:  GOTO   4F6 (RETURN)
....................  
.................... void main (void) 
.................... { 
0463:  CLRF   04
0464:  MOVLW  1F
0465:  ANDWF  03,F
0466:  MOVLW  19
0467:  BSF    03.5
0468:  MOVWF  19
0469:  MOVLW  26
046A:  MOVWF  18
046B:  MOVLW  90
046C:  BCF    03.5
046D:  MOVWF  18
046E:  BSF    03.5
046F:  BSF    1F.0
0470:  BSF    1F.1
0471:  BSF    1F.2
0472:  BCF    1F.3
.................... byte m_Cntr=0; 
*
0477:  CLRF   36
.................... long m_Adc_Value=0; 
0478:  CLRF   37
0479:  CLRF   38
.................... float m_Voltages=0.0; 
047A:  CLRF   39
047B:  CLRF   3A
047C:  CLRF   3B
047D:  CLRF   3C
.................... setup_adc_ports(AN0_AN1_AN2_AN3_AN4); 
047E:  BSF    03.5
047F:  BCF    1F.0
0480:  BSF    1F.1
0481:  BCF    1F.2
0482:  BCF    1F.3
.................... setup_adc(ADC_CLOCK_INTERNAL ); 
0483:  BCF    03.5
0484:  BSF    1F.6
0485:  BSF    1F.7
0486:  BSF    03.5
0487:  BSF    1F.7
0488:  BCF    03.5
0489:  BSF    1F.0
.................... setup_psp(PSP_DISABLED); 
048A:  BSF    03.5
048B:  BCF    09.4
.................... setup_spi(FALSE); 
*
0475:  MOVLW  FF
0476:  MOVWF  35
*
048C:  BCF    03.5
048D:  BCF    14.5
048E:  BCF    35.5
048F:  MOVF   35,W
0490:  BSF    03.5
0491:  MOVWF  07
0492:  BCF    03.5
0493:  BSF    35.4
0494:  MOVF   35,W
0495:  BSF    03.5
0496:  MOVWF  07
0497:  BCF    03.5
0498:  BCF    35.3
0499:  MOVF   35,W
049A:  BSF    03.5
049B:  MOVWF  07
049C:  MOVLW  00
049D:  BCF    03.5
049E:  MOVWF  14
049F:  BSF    03.5
04A0:  MOVWF  14
.................... set_tris_c(0x80); 
04A1:  MOVLW  80
04A2:  MOVWF  07
04A3:  BCF    03.5
04A4:  MOVWF  35
.................... lcd_init(); 
04A5:  GOTO   08C
.................... LED_IND1=1; 
04A6:  BSF    07.3
.................... LED_IND2=0; 
04A7:  BCF    07.4
....................  
.................... while(1) 
.................... { 
.................... 	set_adc_channel(2); 
04A8:  MOVLW  10
04A9:  MOVWF  78
04AA:  MOVF   1F,W
04AB:  ANDLW  C7
04AC:  IORWF  78,W
04AD:  MOVWF  1F
.................... 	m_Adc_Value=read_adc(); 
04AE:  BSF    1F.2
04AF:  BTFSC  1F.2
04B0:  GOTO   4AF
04B1:  BSF    03.5
04B2:  MOVF   1E,W
04B3:  BCF    03.5
04B4:  MOVWF  37
04B5:  MOVF   1E,W
04B6:  MOVWF  38
.................... 	m_Voltages=(m_Adc_Value/1024.0)*5.0; 
04B7:  MOVF   38,W
04B8:  MOVWF  3E
04B9:  MOVF   37,W
04BA:  MOVWF  3D
04BB:  GOTO   0B8
04BC:  MOVF   7A,W
04BD:  MOVWF  40
04BE:  MOVF   79,W
04BF:  MOVWF  3F
04C0:  MOVF   78,W
04C1:  MOVWF  3E
04C2:  MOVF   77,W
04C3:  MOVWF  3D
04C4:  CLRF   44
04C5:  CLRF   43
04C6:  CLRF   42
04C7:  MOVLW  89
04C8:  MOVWF  41
04C9:  GOTO   0D8
04CA:  MOVF   77,W
04CB:  MOVWF  3D
04CC:  MOVF   78,W
04CD:  MOVWF  3E
04CE:  MOVF   79,W
04CF:  MOVWF  3F
04D0:  MOVF   7A,W
04D1:  MOVWF  40
04D2:  MOVWF  50
04D3:  MOVF   79,W
04D4:  MOVWF  4F
04D5:  MOVF   78,W
04D6:  MOVWF  4E
04D7:  MOVF   77,W
04D8:  MOVWF  4D
04D9:  CLRF   54
04DA:  CLRF   53
04DB:  MOVLW  20
04DC:  MOVWF  52
04DD:  MOVLW  81
04DE:  MOVWF  51
04DF:  CALL   1A5
04E0:  MOVF   7A,W
04E1:  MOVWF  3C
04E2:  MOVF   79,W
04E3:  MOVWF  3B
04E4:  MOVF   78,W
04E5:  MOVWF  3A
04E6:  MOVF   77,W
04E7:  MOVWF  39
.................... 	PrintVoltage(m_Voltages); 
04E8:  MOVF   3C,W
04E9:  MOVWF  40
04EA:  MOVF   3B,W
04EB:  MOVWF  3F
04EC:  MOVF   3A,W
04ED:  MOVWF  3E
04EE:  MOVF   39,W
04EF:  MOVWF  3D
04F0:  GOTO   398
.................... 	PrintCounter(m_Cntr++); 
04F1:  MOVF   36,W
04F2:  INCF   36,F
04F3:  MOVWF  3D
04F4:  MOVWF  3E
04F5:  GOTO   43F
....................     delay_ms(100); 
04F6:  MOVLW  64
04F7:  MOVWF  45
04F8:  CALL   030
.................... 	LED_IND1=~LED_IND1; 
04F9:  MOVLW  08
04FA:  XORWF  07,F
.................... 	LED_IND2=~LED_IND2; 
04FB:  MOVLW  10
04FC:  XORWF  07,F
....................  
.................... } 
04FD:  GOTO   4A8
.................... while(1); 
04FE:  GOTO   4FE
.................... } 
04FF:  SLEEP

Configuration Fuses:
   Word  1: 3F7A   HS NOWDT NOPUT NOPROTECT BROWNOUT NOLVP NOCPD NOWRT NODEBUG
